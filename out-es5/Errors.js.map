{"version":3,"sources":["../out/Errors.js"],"names":["Errors","Object","assign","baseErrors","columnsCanntEmpty","Error","notImplemented","message"],"mappings":";;;;;;;AAsCA;;AAtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEO,IAAIA,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAcC,qBAAd,EAA0B;AAC1CC,EAAAA,iBAD0C,+BACtB;AAChB,WAAO,IAAIC,KAAJ,CAAU,sBAAV,CAAP;AACH,GAHyC;AAI1CC,EAAAA,cAJ0C,0BAI3BC,OAJ2B,EAIlB;AACpBA,IAAAA,OAAO,GAAGA,OAAO,IAAI,iBAArB;AACA,WAAO,IAAIF,KAAJ,CAAUE,OAAV,CAAP;AACH;AAPyC,CAA1B,CAAb","sourcesContent":["// namespace wuzhui {\r\n// export class Errors {\r\n//     static notImplemented(message?: string) {\r\n//         message = message || \"Not implemented\";\r\n//         return new Error(message);\r\n//     }\r\n//     static argumentNull(paramName) {\r\n//         return new Error(\"Argument '\" + paramName + \"' can not be null.\");\r\n//     }\r\n//     static controllBelonsAnother() {\r\n//         return new Error(\"The control is belongs another control.\");\r\n//     }\r\n//     static columnsCanntEmpty() {\r\n//         return new Error(\"Columns cannt empty.\");\r\n//     }\r\n//     static dataSourceCanntInsert() {\r\n//         return new Error(\"DataSource can not insert.\");\r\n//     }\r\n//     static dataSourceCanntUpdate() {\r\n//         return new Error(\"DataSource can not update.\");\r\n//     }\r\n//     static dataSourceCanntDelete() {\r\n//         return new Error(\"DataSource can not delete.\");\r\n//     }\r\n//     static primaryKeyNull(key: string) {\r\n//         let msg = `Primary key named '${key}' value is null.`;\r\n//         return new Error(msg);\r\n//     }\r\n//     static queryResultTypeError() {\r\n//         let msg = 'Type of the query result is expected as Array or DataSourceSelectResult.';\r\n//         return new Error(msg);\r\n//     }\r\n//     static argumentFieldNull(argumentName: string, fieldName: string) {\r\n//         let msg = `Argument ${argumentName} ${fieldName} field can not be null or empty.`\r\n//         return new Error(msg);\r\n//     }\r\n// }\r\n// }\r\nimport { errors as baseErrors } from \"maishu-toolkit\";\r\nexport let Errors = Object.assign(baseErrors, {\r\n    columnsCanntEmpty() {\r\n        return new Error(\"Columns cannt empty.\");\r\n    },\r\n    notImplemented(message) {\r\n        message = message || \"Not implemented\";\r\n        return new Error(message);\r\n    }\r\n});\r\n"],"file":"Errors.js"}