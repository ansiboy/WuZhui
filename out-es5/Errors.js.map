{"version":3,"sources":["../out/Errors.js"],"names":["Errors","message","Error","paramName","key","msg","argumentName","fieldName"],"mappings":";;;;;;;;;;;;;AAAA;IACaA,M;;;;;;;;;mCACaC,O,EAAS;AAC3BA,MAAAA,OAAO,GAAGA,OAAO,IAAI,iBAArB;AACA,aAAO,IAAIC,KAAJ,CAAUD,OAAV,CAAP;AACH;;;iCACmBE,S,EAAW;AAC3B,aAAO,IAAID,KAAJ,CAAU,eAAeC,SAAf,GAA2B,oBAArC,CAAP;AACH;;;4CAC8B;AAC3B,aAAO,IAAID,KAAJ,CAAU,yCAAV,CAAP;AACH;;;wCAC0B;AACvB,aAAO,IAAIA,KAAJ,CAAU,sBAAV,CAAP;AACH;;;4CAC8B;AAC3B,aAAO,IAAIA,KAAJ,CAAU,4BAAV,CAAP;AACH;;;4CAC8B;AAC3B,aAAO,IAAIA,KAAJ,CAAU,4BAAV,CAAP;AACH;;;4CAC8B;AAC3B,aAAO,IAAIA,KAAJ,CAAU,4BAAV,CAAP;AACH;;;mCACqBE,G,EAAK;AACvB,UAAIC,GAAG,gCAAyBD,GAAzB,qBAAP;AACA,aAAO,IAAIF,KAAJ,CAAUG,GAAV,CAAP;AACH;;;2CAC6B;AAC1B,UAAIA,GAAG,GAAG,0EAAV;AACA,aAAO,IAAIH,KAAJ,CAAUG,GAAV,CAAP;AACH;;;sCACwBC,Y,EAAcC,S,EAAW;AAC9C,UAAIF,GAAG,sBAAeC,YAAf,cAA+BC,SAA/B,qCAAP;AACA,aAAO,IAAIL,KAAJ,CAAUG,GAAV,CAAP;AACH;;;;KAEL","sourcesContent":["// namespace wuzhui {\r\nexport class Errors {\r\n    static notImplemented(message) {\r\n        message = message || \"Not implemented\";\r\n        return new Error(message);\r\n    }\r\n    static argumentNull(paramName) {\r\n        return new Error(\"Argument '\" + paramName + \"' can not be null.\");\r\n    }\r\n    static controllBelonsAnother() {\r\n        return new Error(\"The control is belongs another control.\");\r\n    }\r\n    static columnsCanntEmpty() {\r\n        return new Error(\"Columns cannt empty.\");\r\n    }\r\n    static dataSourceCanntInsert() {\r\n        return new Error(\"DataSource can not insert.\");\r\n    }\r\n    static dataSourceCanntUpdate() {\r\n        return new Error(\"DataSource can not update.\");\r\n    }\r\n    static dataSourceCanntDelete() {\r\n        return new Error(\"DataSource can not delete.\");\r\n    }\r\n    static primaryKeyNull(key) {\r\n        let msg = `Primary key named '${key}' value is null.`;\r\n        return new Error(msg);\r\n    }\r\n    static queryResultTypeError() {\r\n        let msg = 'Type of the query result is expected as Array or DataSourceSelectResult.';\r\n        return new Error(msg);\r\n    }\r\n    static argumentFieldNull(argumentName, fieldName) {\r\n        let msg = `Argument ${argumentName} ${fieldName} field can not be null or empty.`;\r\n        return new Error(msg);\r\n    }\r\n}\r\n// }\r\n"],"file":"Errors.js"}