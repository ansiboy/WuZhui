{"version":3,"sources":["../../out/fields/DataControlField.js"],"names":["GridViewCell","document","createElement","Control","GridViewDataCell","params","p","nullText","dataFormatString","dataField","render","dataItem","apply","element","value","text","formatValue","innerHTML","format","result","i","open","indexOf","close","slice","charAt","Error","brace","substring","argFormat","Date","formatDate","Number","formatNumber","toString","y","getFullYear","m","getMonth","d","getDate","h","getHours","M","getMinutes","s","getSeconds","twoDigit","TEN","reg","RegExp","test","num","substr","toFixed","GridViewHeaderCell","field","ascHTML","descHTML","sortingHTML","toSortHTML","sorting","sorted","sortExpression","labelElement","href","defaultHeaderText","onclick","handleSort","_iconElement","appendChild","add","updateSortIcon","style","headerStyle","selectArguments","gridView","sortType","dataSource","select","then","headerText","_sortType","DataControlField","visible","cell","footerText","footerStyle","Errors","argumentNull","itemStyle","_gridView"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;IACaA,Y;;;;;AACT,0BAAc;AAAA;;AAAA,qFACJC,QAAQ,CAACC,aAAT,CAAuB,IAAvB,CADI;AAEb;;;EAH6BC,iB;;;;IAKrBC,gB;;;;;AACT,4BAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAChB;AACA,QAAIC,CAAC,GAAGD,MAAR;AACA,UAAKE,QAAL,GAAgBD,CAAC,CAACC,QAAF,IAAc,IAAd,GAAqBD,CAAC,CAACC,QAAvB,GAAkC,EAAlD;AACA,UAAKC,gBAAL,GAAwBF,CAAC,CAACE,gBAA1B;AACA,UAAKC,SAAL,GAAiBH,CAAC,CAACG,SAAnB;;AACA,QAAIH,CAAC,CAACI,MAAN,EAAc;AACV,YAAKA,MAAL,GAAc,UAACC,QAAD;AAAA,eAAcL,CAAC,CAACI,MAAF,CAASE,KAAT,gCAAqB,CAACD,QAAD,EAAW,MAAKE,OAAhB,CAArB,CAAd;AAAA,OAAd;AACH;;AARe;AASnB;;;;2BACMF,Q,EAAU;AACb,UAAIG,KAAK,GAAGH,QAAQ,CAAC,KAAKF,SAAN,CAApB;AACA,UAAIM,IAAJ;AACA,UAAID,KAAK,IAAI,IAAb,EACIC,IAAI,GAAG,KAAKR,QAAZ,CADJ,KAGIQ,IAAI,GAAG,KAAKC,WAAL,CAAiBF,KAAjB,EAAwB,KAAKN,gBAA7B,CAAP;AACJ,WAAKK,OAAL,CAAaI,SAAb,GAAyBF,IAAzB;AACH;;;gCACWD,K,EAAOI,M,EAAQ;AACvB,UAAI,CAACA,MAAL,EACI,iBAAUJ,KAAV;AACJ,UAAIK,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,IAAkB;AACd,YAAIC,IAAI,GAAGH,MAAM,CAACI,OAAP,CAAe,GAAf,EAAoBF,CAApB,CAAX;AACA,YAAIG,KAAK,GAAGL,MAAM,CAACI,OAAP,CAAe,GAAf,EAAoBF,CAApB,CAAZ;;AACA,YAAKC,IAAI,GAAG,CAAR,IAAeE,KAAK,GAAG,CAA3B,EAA+B;AAC3BJ,UAAAA,MAAM,IAAID,MAAM,CAACM,KAAP,CAAaJ,CAAb,CAAV;AACA;AACH;;AACD,YAAKG,KAAK,GAAG,CAAT,KAAiBA,KAAK,GAAGF,IAAT,IAAmBA,IAAI,GAAG,CAA1C,CAAJ,EAAmD;AAC/C,cAAIH,MAAM,CAACO,MAAP,CAAcF,KAAK,GAAG,CAAtB,MAA6B,GAAjC,EAAsC;AAClC,kBAAM,IAAIG,KAAJ,CAAU,mCAAV,CAAN;AACH;;AACDP,UAAAA,MAAM,IAAID,MAAM,CAACM,KAAP,CAAaJ,CAAb,EAAgBG,KAAK,GAAG,CAAxB,CAAV;AACAH,UAAAA,CAAC,GAAGG,KAAK,GAAG,CAAZ;AACA;AACH;;AACDJ,QAAAA,MAAM,IAAID,MAAM,CAACM,KAAP,CAAaJ,CAAb,EAAgBC,IAAhB,CAAV;AACAD,QAAAA,CAAC,GAAGC,IAAI,GAAG,CAAX;;AACA,YAAIH,MAAM,CAACO,MAAP,CAAcL,CAAd,MAAqB,GAAzB,EAA8B;AAC1BD,UAAAA,MAAM,IAAI,GAAV;AACAC,UAAAA,CAAC;AACD;AACH;;AACD,YAAIG,KAAK,GAAG,CAAZ,EACI,MAAM,IAAIG,KAAJ,CAAU,mCAAV,CAAN;AACJ,YAAIC,KAAK,GAAGT,MAAM,CAACU,SAAP,CAAiBR,CAAjB,EAAoBG,KAApB,CAAZ;AACA,YAAIM,SAAS,GAAGF,KAAhB;;AACA,YAAI,OAAQb,KAAR,KAAmB,WAAnB,IAAkCA,KAAK,KAAK,IAAhD,EAAsD;AAClDA,UAAAA,KAAK,GAAG,EAAR;AACH;;AACD,YAAIA,KAAK,YAAYgB,IAArB,EACIX,MAAM,GAAGA,MAAM,GAAG,KAAKY,UAAL,CAAgBjB,KAAhB,EAAuBe,SAAvB,CAAlB,CADJ,KAEK,IAAIf,KAAK,YAAYkB,MAAjB,IAA2B,OAAOlB,KAAP,IAAgB,QAA/C,EACDK,MAAM,GAAGA,MAAM,GAAG,KAAKc,YAAL,CAAkBnB,KAAlB,EAAyBe,SAAzB,CAAlB,CADC,KAGDV,MAAM,GAAGA,MAAM,GAAGL,KAAK,CAACoB,QAAN,EAAlB;AACJd,QAAAA,CAAC,GAAGG,KAAK,GAAG,CAAZ;AACH;;AACD,aAAOJ,MAAP;AACH;;;+BACUL,K,EAAOI,M,EAAQ;AACtB,UAAIiB,CAAC,GAAGrB,KAAK,CAACsB,WAAN,EAAR;AACA,UAAIC,CAAC,GAAGvB,KAAK,CAACwB,QAAN,KAAmB,CAA3B;AACA,UAAIC,CAAC,GAAGzB,KAAK,CAAC0B,OAAN,EAAR;AACA,UAAIC,CAAC,GAAG3B,KAAK,CAAC4B,QAAN,EAAR;AACA,UAAIC,CAAC,GAAG7B,KAAK,CAAC8B,UAAN,EAAR;AACA,UAAIC,CAAC,GAAG/B,KAAK,CAACgC,UAAN,EAAR;;AACA,UAAIC,QAAQ,GAAG,SAAXA,QAAW,CAAUjC,KAAV,EAAiB;AAC5B,YAAMkC,GAAG,GAAG,EAAZ;AACA,YAAIlC,KAAK,GAAGkC,GAAZ,EACI,OAAO,MAAMlC,KAAb;AACJ,eAAOA,KAAK,CAACoB,QAAN,EAAP;AACH,OALD;;AAMA,cAAQhB,MAAR;AACI,aAAK,GAAL;AACI,2BAAUiB,CAAV,cAAeE,CAAf,cAAoBE,CAApB;;AACJ,aAAK,GAAL;AACI,2BAAUJ,CAAV,cAAeE,CAAf,cAAoBE,CAApB,cAAyBE,CAAzB,cAA8BE,CAA9B;;AACJ,aAAK,IAAL;AACI,2BAAUR,CAAV,cAAeY,QAAQ,CAACV,CAAD,CAAvB,cAA8BU,QAAQ,CAACR,CAAD,CAAtC,cAA6CQ,QAAQ,CAACN,CAAD,CAArD,cAA4DM,QAAQ,CAACJ,CAAD,CAApE;;AACJ,aAAK,GAAL;AACI,2BAAUR,CAAV,cAAeE,CAAf,cAAoBE,CAApB,cAAyBE,CAAzB,cAA8BE,CAA9B,cAAmCE,CAAnC;;AACJ,aAAK,IAAL;AACI,2BAAUV,CAAV,cAAeY,QAAQ,CAACV,CAAD,CAAvB,cAA8BU,QAAQ,CAACR,CAAD,CAAtC,cAA6CQ,QAAQ,CAACN,CAAD,CAArD,cAA4DM,QAAQ,CAACJ,CAAD,CAApE,cAA2EI,QAAQ,CAACF,CAAD,CAAnF;;AACJ,aAAK,GAAL;AACI,2BAAUJ,CAAV,cAAeE,CAAf;;AACJ,aAAK,GAAL;AACI,2BAAUF,CAAV,cAAeE,CAAf,cAAoBE,CAApB;AAdR;;AAgBA,aAAO/B,KAAK,CAACoB,QAAN,EAAP;AACH;;;iCACYpB,K,EAAOI,M,EAAQ;AACxB,UAAI+B,GAAG,GAAG,IAAIC,MAAJ,CAAW,UAAX,CAAV;;AACA,UAAID,GAAG,CAACE,IAAJ,CAASjC,MAAT,CAAJ,EAAsB;AAClB,YAAIkC,GAAG,GAAGlC,MAAM,CAACmC,MAAP,CAAc,CAAd,CAAV;AACA,eAAOvC,KAAK,CAACwC,OAAN,CAAcF,GAAd,CAAP;AACH;;AACD,aAAOtC,KAAK,CAACoB,QAAN,EAAP;AACH;;;;EArGiClC,Y;;;;IAuGzBuD,kB;;;;;AACT,8BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,6FAAMvD,QAAQ,CAACC,aAAT,CAAuB,IAAvB,CAAN;AACA,WAAKuD,OAAL,GAAe,GAAf;AACA,WAAKC,QAAL,GAAgB,GAAhB;AACA,WAAKC,WAAL,GAAmB,KAAnB;AACA,WAAKC,UAAL,GAAkB,GAAlB;AACA,WAAKJ,KAAL,GAAaA,KAAb;AACA,WAAKK,OAAL,GAAe,yBAAf;AACA,WAAKC,MAAL,GAAc,yBAAd;;AACA,QAAIN,KAAK,CAACO,cAAV,EAA0B;AACtB,UAAIC,YAAY,GAAG/D,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAnB;AACA8D,MAAAA,YAAY,CAACC,IAAb,GAAoB,aAApB;AACAD,MAAAA,YAAY,CAAC/C,SAAb,GAAyB,OAAKiD,iBAAL,EAAzB;;AACAF,MAAAA,YAAY,CAACG,OAAb,GAAuB;AAAA,eAAM,OAAKC,UAAL,EAAN;AAAA,OAAvB;;AACA,aAAKC,YAAL,GAAoBpE,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAApB;AACA,aAAKmE,YAAL,CAAkBpD,SAAlB,GAA8B,OAAK2C,UAAnC;;AACA,aAAKU,WAAL,CAAiBN,YAAjB;;AACA,aAAKM,WAAL,CAAiB,OAAKD,YAAtB;;AACA,aAAKR,OAAL,CAAaU,GAAb,CAAiB;AAAA,eAAM,OAAKF,YAAL,CAAkBpD,SAAlB,GAA8B,OAAK0C,WAAzC;AAAA,OAAjB;;AACA,aAAKG,MAAL,CAAYS,GAAZ,CAAgB;AAAA,eAAM,OAAKC,cAAL,EAAN;AAAA,OAAhB;AACH,KAXD,MAYK;AACD,aAAK3D,OAAL,CAAaI,SAAb,GAAyB,OAAKiD,iBAAL,EAAzB;AACH;;AACD,WAAKO,KAAL,CAAWjB,KAAK,CAACkB,WAAjB;;AAxBe;AAyBlB;;;;iCACY;AAAA;;AACT,UAAIC,eAAe,GAAG,KAAKnB,KAAL,CAAWoB,QAAX,CAAoBD,eAA1C;AACA,UAAIE,QAAQ,GAAG,KAAKA,QAAL,IAAiB,KAAjB,GAAyB,MAAzB,GAAkC,KAAjD;AACA,iCAAa,KAAKhB,OAAlB,EAA2B,IAA3B,EAAiC;AAAEgB,QAAAA,QAAQ,EAARA;AAAF,OAAjC;AACAF,MAAAA,eAAe,CAACZ,cAAhB,GAAiC,KAAKP,KAAL,CAAWO,cAAX,GAA4B,GAA5B,GAAkCc,QAAnE;AACA,aAAO,KAAKrB,KAAL,CAAWoB,QAAX,CAAoBE,UAApB,CAA+BC,MAA/B,CAAsCJ,eAAtC,EACFK,IADE,CACG,YAAM;AACZ,QAAA,MAAI,CAACH,QAAL,GAAgBA,QAAhB;AACA,mCAAa,MAAI,CAACf,MAAlB,EAA0B,MAA1B,EAAgC;AAAEe,UAAAA,QAAQ,EAARA;AAAF,SAAhC;AACH,OAJM,CAAP;AAKH;;;wCACmB;AAChB,aAAO,KAAKrB,KAAL,CAAWyB,UAAX,IAAyB,KAAKzB,KAAL,CAAW/C,SAApC,IAAiD,EAAxD;AACH;;;oCAOe;AACZ,WAAK4D,YAAL,CAAkBpD,SAAlB,GAA8B,KAAK2C,UAAnC;AACH;;;qCACgB;AACb,UAAI,KAAKiB,QAAL,IAAiB,KAArB,EAA4B;AACxB,aAAKR,YAAL,CAAkBpD,SAAlB,GAA8B,KAAKwC,OAAnC;AACH,OAFD,MAGK,IAAI,KAAKoB,QAAL,IAAiB,MAArB,EAA6B;AAC9B,aAAKR,YAAL,CAAkBpD,SAAlB,GAA8B,KAAKyC,QAAnC;AACH,OAFI,MAGA;AACD,aAAKW,YAAL,CAAkBpD,SAAlB,GAA8B,KAAK2C,UAAnC;AACH;AACJ;;;wBAnBc;AACX,aAAO,KAAKsB,SAAZ;AACH,K;sBACYpE,K,EAAO;AAChB,WAAKoE,SAAL,GAAiBpE,KAAjB;AACH;;;;EA9CmCX,iB;;;;IA8D3BgF,gB;;;AACT,4BAAY9E,MAAZ,EAAoB;AAAA;;AAChB,QAAIA,MAAM,CAAC+E,OAAP,IAAkB,IAAtB,EACI/E,MAAM,CAAC+E,OAAP,GAAiB,IAAjB;AACJ,SAAK/E,MAAL,GAAcA,MAAd;AACH;AACD;;;;;;;uCA+DmB;AACf,UAAIgF,IAAI,GAAG,IAAI9B,kBAAJ,CAAuB,IAAvB,CAAX;AACA,aAAO8B,IAAP;AACH;;;uCACkB;AACf,UAAIA,IAAI,GAAG,IAAIrF,YAAJ,EAAX;AACAqF,MAAAA,IAAI,CAACxE,OAAL,CAAaI,SAAb,GAAyB,KAAKqE,UAAL,IAAmB,EAA5C;AACAD,MAAAA,IAAI,CAACZ,KAAL,CAAW,KAAKc,WAAhB;AACA,aAAOF,IAAP;AACH;;;mCACc1E,Q,EAAU;AACrB,UAAI,CAACA,QAAL,EACI,MAAM6E,eAAOC,YAAP,CAAoB,UAApB,CAAN;AACJ,UAAIJ,IAAI,GAAG,IAAIrF,YAAJ,EAAX;AACAqF,MAAAA,IAAI,CAACZ,KAAL,CAAW,KAAKiB,SAAhB;AACA,aAAOL,IAAP;AACH;;;wBA5EgB;AACb,aAAO,KAAKhF,MAAL,CAAYiF,UAAnB;AACH;AACD;;;;sBAGexE,K,EAAO;AAClB,WAAKT,MAAL,CAAYiF,UAAZ,GAAyBxE,KAAzB;AACH;AACD;;;;;;wBAGiB;AACb,aAAO,KAAKT,MAAL,CAAY4E,UAAnB;AACH;AACD;;;;sBAGenE,K,EAAO;AAClB,WAAKT,MAAL,CAAY4E,UAAZ,GAAyBnE,KAAzB;AACH;;;wBACe;AACZ,aAAO,KAAKT,MAAL,CAAYqF,SAAnB;AACH,K;sBACa5E,K,EAAO;AACjB,WAAKT,MAAL,CAAYqF,SAAZ,GAAwB5E,KAAxB;AACH;;;wBACiB;AACd,aAAO,KAAKT,MAAL,CAAYkF,WAAnB;AACH,K;sBACezE,K,EAAO;AACnB,WAAKT,MAAL,CAAYkF,WAAZ,GAA0BzE,KAA1B;AACH;;;wBACiB;AACd,aAAO,KAAKT,MAAL,CAAYqE,WAAnB;AACH,K;sBACe5D,K,EAAO;AACnB,WAAKT,MAAL,CAAYqE,WAAZ,GAA0B5D,KAA1B;AACH;;;wBACa;AACV,aAAO,KAAKT,MAAL,CAAY+E,OAAnB;AACH;;;wBACc;AACX,aAAO,KAAKO,SAAZ;AACH,K;sBACY7E,K,EAAO;AAChB,WAAK6E,SAAL,GAAiB7E,KAAjB;AACH;AACD;;;;;;wBAGqB;AACjB,aAAO,KAAKT,MAAL,CAAY0D,cAAnB;AACH;AACD;;;;sBAGmBjD,K,EAAO;AACtB,WAAKT,MAAL,CAAY0D,cAAZ,GAA6BjD,KAA7B;AACH","sourcesContent":["import { Control } from \"../Control\";\r\nimport { callbacks, fireCallback } from \"../Utility\";\r\nimport { Errors } from \"../Errors\";\r\nexport class GridViewCell extends Control {\r\n    constructor() {\r\n        super(document.createElement('td'));\r\n    }\r\n}\r\nexport class GridViewDataCell extends GridViewCell {\r\n    constructor(params) {\r\n        super();\r\n        let p = params;\r\n        this.nullText = p.nullText != null ? p.nullText : '';\r\n        this.dataFormatString = p.dataFormatString;\r\n        this.dataField = p.dataField;\r\n        if (p.render) {\r\n            this.render = (dataItem) => p.render.apply(this, [dataItem, this.element]);\r\n        }\r\n    }\r\n    render(dataItem) {\r\n        let value = dataItem[this.dataField];\r\n        var text;\r\n        if (value == null)\r\n            text = this.nullText;\r\n        else\r\n            text = this.formatValue(value, this.dataFormatString);\r\n        this.element.innerHTML = text;\r\n    }\r\n    formatValue(value, format) {\r\n        if (!format)\r\n            return `${value}`;\r\n        var result = '';\r\n        for (var i = 0;;) {\r\n            var open = format.indexOf('{', i);\r\n            var close = format.indexOf('}', i);\r\n            if ((open < 0) && (close < 0)) {\r\n                result += format.slice(i);\r\n                break;\r\n            }\r\n            if ((close > 0) && ((close < open) || (open < 0))) {\r\n                if (format.charAt(close + 1) !== '}') {\r\n                    throw new Error('Sys.Res.stringFormatBraceMismatch');\r\n                }\r\n                result += format.slice(i, close + 1);\r\n                i = close + 2;\r\n                continue;\r\n            }\r\n            result += format.slice(i, open);\r\n            i = open + 1;\r\n            if (format.charAt(i) === '{') {\r\n                result += '{';\r\n                i++;\r\n                continue;\r\n            }\r\n            if (close < 0)\r\n                throw new Error('Sys.Res.stringFormatBraceMismatch');\r\n            var brace = format.substring(i, close);\r\n            var argFormat = brace;\r\n            if (typeof (value) === \"undefined\" || value === null) {\r\n                value = '';\r\n            }\r\n            if (value instanceof Date)\r\n                result = result + this.formatDate(value, argFormat);\r\n            else if (value instanceof Number || typeof value == 'number')\r\n                result = result + this.formatNumber(value, argFormat);\r\n            else\r\n                result = result + value.toString();\r\n            i = close + 1;\r\n        }\r\n        return result;\r\n    }\r\n    formatDate(value, format) {\r\n        let y = value.getFullYear();\r\n        let m = value.getMonth() + 1;\r\n        let d = value.getDate();\r\n        let h = value.getHours();\r\n        let M = value.getMinutes();\r\n        let s = value.getSeconds();\r\n        let twoDigit = function (value) {\r\n            const TEN = 10;\r\n            if (value < TEN)\r\n                return `0` + value;\r\n            return value.toString();\r\n        };\r\n        switch (format) {\r\n            case 'd':\r\n                return `${y}-${m}-${d}`;\r\n            case 'g':\r\n                return `${y}-${m}-${d} ${h}:${M}`;\r\n            case 'gg':\r\n                return `${y}-${twoDigit(m)}-${twoDigit(d)} ${twoDigit(h)}:${twoDigit(M)}`;\r\n            case 'G':\r\n                return `${y}-${m}-${d} ${h}:${M}:${s}`;\r\n            case 'GG':\r\n                return `${y}-${twoDigit(m)}-${twoDigit(d)} ${twoDigit(h)}:${twoDigit(M)}:${twoDigit(s)}`;\r\n            case 't':\r\n                return `${h}:${M}`;\r\n            case 'T':\r\n                return `${h}:${M}:${s}`;\r\n        }\r\n        return value.toString();\r\n    }\r\n    formatNumber(value, format) {\r\n        let reg = new RegExp('^C[0-9]+');\r\n        if (reg.test(format)) {\r\n            let num = format.substr(1);\r\n            return value.toFixed(num);\r\n        }\r\n        return value.toString();\r\n    }\r\n}\r\nexport class GridViewHeaderCell extends Control {\r\n    constructor(field) {\r\n        super(document.createElement('th'));\r\n        this.ascHTML = '↑';\r\n        this.descHTML = '↓';\r\n        this.sortingHTML = '...';\r\n        this.toSortHTML = '↕';\r\n        this.field = field;\r\n        this.sorting = callbacks();\r\n        this.sorted = callbacks();\r\n        if (field.sortExpression) {\r\n            let labelElement = document.createElement('a');\r\n            labelElement.href = 'javascript:';\r\n            labelElement.innerHTML = this.defaultHeaderText();\r\n            labelElement.onclick = () => this.handleSort();\r\n            this._iconElement = document.createElement('span');\r\n            this._iconElement.innerHTML = this.toSortHTML;\r\n            this.appendChild(labelElement);\r\n            this.appendChild(this._iconElement);\r\n            this.sorting.add(() => this._iconElement.innerHTML = this.sortingHTML);\r\n            this.sorted.add(() => this.updateSortIcon());\r\n        }\r\n        else {\r\n            this.element.innerHTML = this.defaultHeaderText();\r\n        }\r\n        this.style(field.headerStyle);\r\n    }\r\n    handleSort() {\r\n        let selectArguments = this.field.gridView.selectArguments;\r\n        let sortType = this.sortType == 'asc' ? 'desc' : 'asc';\r\n        fireCallback(this.sorting, this, { sortType });\r\n        selectArguments.sortExpression = this.field.sortExpression + ' ' + sortType;\r\n        return this.field.gridView.dataSource.select(selectArguments)\r\n            .then(() => {\r\n            this.sortType = sortType;\r\n            fireCallback(this.sorted, this, { sortType });\r\n        });\r\n    }\r\n    defaultHeaderText() {\r\n        return this.field.headerText || this.field.dataField || '';\r\n    }\r\n    get sortType() {\r\n        return this._sortType;\r\n    }\r\n    set sortType(value) {\r\n        this._sortType = value;\r\n    }\r\n    clearSortIcon() {\r\n        this._iconElement.innerHTML = this.toSortHTML;\r\n    }\r\n    updateSortIcon() {\r\n        if (this.sortType == 'asc') {\r\n            this._iconElement.innerHTML = this.ascHTML;\r\n        }\r\n        else if (this.sortType == 'desc') {\r\n            this._iconElement.innerHTML = this.descHTML;\r\n        }\r\n        else {\r\n            this._iconElement.innerHTML = this.toSortHTML;\r\n        }\r\n    }\r\n}\r\nexport class DataControlField {\r\n    constructor(params) {\r\n        if (params.visible == null)\r\n            params.visible = true;\r\n        this.params = params;\r\n    }\r\n    /**\r\n     * Gets the text that is displayed in the footer item of a data control field.\r\n     */\r\n    get footerText() {\r\n        return this.params.footerText;\r\n    }\r\n    /**\r\n     * Sets the text that is displayed in the footer item of a data control field.\r\n     */\r\n    set footerText(value) {\r\n        this.params.footerText = value;\r\n    }\r\n    /**\r\n     * Gets the text that is displayed in the header item of a data control field.\r\n     */\r\n    get headerText() {\r\n        return this.params.headerText;\r\n    }\r\n    /**\r\n    * Sets the text that is displayed in the header item of a data control field.\r\n    */\r\n    set headerText(value) {\r\n        this.params.headerText = value;\r\n    }\r\n    get itemStyle() {\r\n        return this.params.itemStyle;\r\n    }\r\n    set itemStyle(value) {\r\n        this.params.itemStyle = value;\r\n    }\r\n    get footerStyle() {\r\n        return this.params.footerStyle;\r\n    }\r\n    set footerStyle(value) {\r\n        this.params.footerStyle = value;\r\n    }\r\n    get headerStyle() {\r\n        return this.params.headerStyle;\r\n    }\r\n    set headerStyle(value) {\r\n        this.params.headerStyle = value;\r\n    }\r\n    get visible() {\r\n        return this.params.visible;\r\n    }\r\n    get gridView() {\r\n        return this._gridView;\r\n    }\r\n    set gridView(value) {\r\n        this._gridView = value;\r\n    }\r\n    /**\r\n     * Gets a sort expression that is used by a data source control to sort data.\r\n     */\r\n    get sortExpression() {\r\n        return this.params.sortExpression;\r\n    }\r\n    /**\r\n     * Sets a sort expression that is used by a data source control to sort data.\r\n     */\r\n    set sortExpression(value) {\r\n        this.params.sortExpression = value;\r\n    }\r\n    createHeaderCell() {\r\n        let cell = new GridViewHeaderCell(this);\r\n        return cell;\r\n    }\r\n    createFooterCell() {\r\n        let cell = new GridViewCell();\r\n        cell.element.innerHTML = this.footerText || '';\r\n        cell.style(this.footerStyle);\r\n        return cell;\r\n    }\r\n    createItemCell(dataItem) {\r\n        if (!dataItem)\r\n            throw Errors.argumentNull('dataItem');\r\n        let cell = new GridViewCell();\r\n        cell.style(this.itemStyle);\r\n        return cell;\r\n    }\r\n}\r\n"],"file":"DataControlField.js"}