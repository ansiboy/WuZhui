{"version":3,"sources":["../../out/fields/DataControlField.js"],"names":["define","require","exports","Control_1","Utility_1","Errors_1","Object","defineProperty","value","GridViewCell","document","createElement","Control","GridViewDataCell","params","p","nullText","dataFormatString","dataField","render","dataItem","apply","element","text","formatValue","innerHTML","format","arg","result","i","open","indexOf","close","slice","charAt","Error","brace","substring","argFormat","Date","formatDate","Number","formatNumber","toString","y","getFullYear","m","getMonth","d","getDate","h","getHours","M","getMinutes","s","getSeconds","twoDigit","TEN","reg","RegExp","test","num","substr","toFixed","GridViewHeaderCell","field","ascHTML","descHTML","sortingHTML","toSortHTML","sorting","callbacks","sorted","sortExpression","labelElement","href","defaultHeaderText","onclick","handleSort","_iconElement","appendChild","add","updateSortIcon","style","headerStyle","selectArguments","gridView","sortType","fireCallback","dataSource","select","then","headerText","_sortType","DataControlField","visible","_params","cell","footerText","footerStyle","Errors","argumentNull","itemStyle","_gridView"],"mappings":"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","sourcesContent":["define([\"require\", \"exports\", \"../Control\", \"../Utility\", \"../Errors\"], function (require, exports, Control_1, Utility_1, Errors_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class GridViewCell extends Control_1.Control {\n        constructor() {\n            super(document.createElement('td'));\n        }\n    }\n    exports.GridViewCell = GridViewCell;\n    class GridViewDataCell extends GridViewCell {\n        constructor(params) {\n            super();\n            let p = params;\n            this.nullText = p.nullText != null ? p.nullText : '';\n            this.dataFormatString = p.dataFormatString;\n            this.dataField = p.dataField;\n            if (p.render) {\n                this.render = (dataItem) => p.render.apply(this, [dataItem, this.element]);\n            }\n        }\n        render(dataItem) {\n            let value = dataItem[this.dataField];\n            var text;\n            if (value == null)\n                text = this.nullText;\n            else if (this.dataFormatString)\n                text = this.formatValue(this.dataFormatString, value);\n            else\n                text = `${value}`;\n            this.element.innerHTML = text;\n        }\n        formatValue(format, arg) {\n            var result = '';\n            for (var i = 0;;) {\n                var open = format.indexOf('{', i);\n                var close = format.indexOf('}', i);\n                if ((open < 0) && (close < 0)) {\n                    result += format.slice(i);\n                    break;\n                }\n                if ((close > 0) && ((close < open) || (open < 0))) {\n                    if (format.charAt(close + 1) !== '}') {\n                        throw new Error('Sys.Res.stringFormatBraceMismatch');\n                    }\n                    result += format.slice(i, close + 1);\n                    i = close + 2;\n                    continue;\n                }\n                result += format.slice(i, open);\n                i = open + 1;\n                if (format.charAt(i) === '{') {\n                    result += '{';\n                    i++;\n                    continue;\n                }\n                if (close < 0)\n                    throw new Error('Sys.Res.stringFormatBraceMismatch');\n                var brace = format.substring(i, close);\n                var argFormat = brace;\n                if (typeof (arg) === \"undefined\" || arg === null) {\n                    arg = '';\n                }\n                if (arg instanceof Date)\n                    result = result + this.formatDate(arg, argFormat);\n                else if (arg instanceof Number || typeof arg == 'number')\n                    result = result + this.formatNumber(arg, argFormat);\n                else\n                    result = result + arg.toString();\n                i = close + 1;\n            }\n            return result;\n        }\n        formatDate(value, format) {\n            let y = value.getFullYear();\n            let m = value.getMonth() + 1;\n            let d = value.getDate();\n            let h = value.getHours();\n            let M = value.getMinutes();\n            let s = value.getSeconds();\n            let twoDigit = function (value) {\n                const TEN = 10;\n                if (value < TEN)\n                    return `0` + value;\n                return value.toString();\n            };\n            switch (format) {\n                case 'd':\n                    return `${y}-${m}-${d}`;\n                case 'g':\n                    return `${y}-${m}-${d} ${h}:${M}`;\n                case 'gg':\n                    return `${y}-${twoDigit(m)}-${twoDigit(d)} ${twoDigit(h)}:${twoDigit(M)}`;\n                case 'G':\n                    return `${y}-${m}-${d} ${h}:${M}:${s}`;\n                case 'GG':\n                    return `${y}-${twoDigit(m)}-${twoDigit(d)} ${twoDigit(h)}:${twoDigit(M)}:${twoDigit(s)}`;\n                case 't':\n                    return `${h}:${M}`;\n                case 'T':\n                    return `${h}:${M}:${s}`;\n            }\n            return value.toString();\n        }\n        formatNumber(value, format) {\n            let reg = new RegExp('^C[0-9]+');\n            if (reg.test(format)) {\n                let num = format.substr(1);\n                return value.toFixed(num);\n            }\n            return value.toString();\n        }\n    }\n    exports.GridViewDataCell = GridViewDataCell;\n    class GridViewHeaderCell extends Control_1.Control {\n        constructor(field) {\n            super(document.createElement('th'));\n            this.ascHTML = '↑';\n            this.descHTML = '↓';\n            this.sortingHTML = '...';\n            this.toSortHTML = '↕';\n            this.field = field;\n            this.sorting = Utility_1.callbacks();\n            this.sorted = Utility_1.callbacks();\n            if (field.sortExpression) {\n                let labelElement = document.createElement('a');\n                labelElement.href = 'javascript:';\n                labelElement.innerHTML = this.defaultHeaderText();\n                labelElement.onclick = () => this.handleSort();\n                this._iconElement = document.createElement('span');\n                this._iconElement.innerHTML = this.toSortHTML;\n                this.appendChild(labelElement);\n                this.appendChild(this._iconElement);\n                this.sorting.add(() => this._iconElement.innerHTML = this.sortingHTML);\n                this.sorted.add(() => this.updateSortIcon());\n            }\n            else {\n                this.element.innerHTML = this.defaultHeaderText();\n            }\n            this.style(field.headerStyle);\n        }\n        handleSort() {\n            let selectArguments = this.field.gridView.selectArguments;\n            let sortType = this.sortType == 'asc' ? 'desc' : 'asc';\n            Utility_1.fireCallback(this.sorting, this, { sortType });\n            selectArguments.sortExpression = this.field.sortExpression + ' ' + sortType;\n            return this.field.gridView.dataSource.select(selectArguments)\n                .then(() => {\n                this.sortType = sortType;\n                Utility_1.fireCallback(this.sorted, this, { sortType });\n            });\n        }\n        defaultHeaderText() {\n            return this.field.headerText || this.field.dataField || '';\n        }\n        get sortType() {\n            return this._sortType;\n        }\n        set sortType(value) {\n            this._sortType = value;\n        }\n        clearSortIcon() {\n            this._iconElement.innerHTML = this.toSortHTML;\n        }\n        updateSortIcon() {\n            if (this.sortType == 'asc') {\n                this._iconElement.innerHTML = this.ascHTML;\n            }\n            else if (this.sortType == 'desc') {\n                this._iconElement.innerHTML = this.descHTML;\n            }\n            else {\n                this._iconElement.innerHTML = this.toSortHTML;\n            }\n        }\n    }\n    exports.GridViewHeaderCell = GridViewHeaderCell;\n    class DataControlField {\n        constructor(params) {\n            if (params.visible == null)\n                params.visible = true;\n            this._params = params;\n        }\n        /**\n         * Gets the text that is displayed in the footer item of a data control field.\n         */\n        get footerText() {\n            return this._params.footerText;\n        }\n        /**\n         * Sets the text that is displayed in the footer item of a data control field.\n         */\n        set footerText(value) {\n            this._params.footerText = value;\n        }\n        /**\n         * Gets the text that is displayed in the header item of a data control field.\n         */\n        get headerText() {\n            return this._params.headerText;\n        }\n        /**\n        * Sets the text that is displayed in the header item of a data control field.\n        */\n        set headerText(value) {\n            this._params.headerText = value;\n        }\n        get itemStyle() {\n            return this._params.itemStyle;\n        }\n        set itemStyle(value) {\n            this._params.itemStyle = value;\n        }\n        get footerStyle() {\n            return this._params.footerStyle;\n        }\n        set footerStyle(value) {\n            this._params.footerStyle = value;\n        }\n        get headerStyle() {\n            return this._params.headerStyle;\n        }\n        set headerStyle(value) {\n            this._params.headerStyle = value;\n        }\n        get visible() {\n            return this._params.visible;\n        }\n        get gridView() {\n            return this._gridView;\n        }\n        set gridView(value) {\n            this._gridView = value;\n        }\n        /**\n         * Gets a sort expression that is used by a data source control to sort data.\n         */\n        get sortExpression() {\n            return this._params.sortExpression;\n        }\n        /**\n         * Sets a sort expression that is used by a data source control to sort data.\n         */\n        set sortExpression(value) {\n            this._params.sortExpression = value;\n        }\n        createHeaderCell() {\n            let cell = new GridViewHeaderCell(this);\n            return cell;\n        }\n        createFooterCell() {\n            let cell = new GridViewCell();\n            cell.element.innerHTML = this.footerText || '';\n            cell.style(this.footerStyle);\n            return cell;\n        }\n        createItemCell(dataItem) {\n            if (!dataItem)\n                throw Errors_1.Errors.argumentNull('dataItem');\n            let cell = new GridViewCell();\n            cell.style(this.itemStyle);\n            return cell;\n        }\n    }\n    exports.DataControlField = DataControlField;\n});\n"],"file":"DataControlField.js"}