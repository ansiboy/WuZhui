{"version":3,"sources":["../../out/fields/BoundField.js"],"names":["BoundField","dataItem","cell","GridViewEditableCell","style","itemStyle","element","document","createElement","control","valueType","params","value","it","input","text","Number","valueOf","Date","nullText","dataField","dataFormatString","controlStyle","readOnly","DataControlField"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;IACaA,U;;;;;;;;;;;;;mCAOMC,Q,EAAU;AACrB,UAAIC,IAAI,GAAG,IAAIC,0CAAJ,CAAyB,IAAzB,EAA+BF,QAA/B,CAAX;AACAC,MAAAA,IAAI,CAACE,KAAL,CAAW,KAAKC,SAAhB;AACA,aAAOH,IAAP;AACH;AACD;;;;;;AAkBA;AACA;oCACgB;AACZ;AACA;AACA;AACA,UAAII,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACA,UAAIC,OAAO,GAAG;AACVH,QAAAA,OAAO,EAAPA,OADU;AAEVI,QAAAA,SAAS,EAAE,KAAKC,MAAL,CAAYD,SAFb;;AAGV,YAAIE,KAAJ,GAAY;AACR,cAAIC,EAAE,GAAG,IAAT;AACA,cAAIC,KAAK,GAAGD,EAAE,CAACP,OAAf;AACA,cAAIS,IAAI,GAAGD,KAAK,CAACF,KAAjB;;AACA,kBAAQC,EAAE,CAACH,SAAX;AACI,iBAAK,QAAL;AACI,qBAAO,IAAIM,MAAJ,CAAWD,IAAX,EAAiBE,OAAjB,EAAP;;AACJ,iBAAK,MAAL;AACI,qBAAO,IAAIC,IAAJ,CAASH,IAAT,CAAP;;AACJ;AACI,qBAAOA,IAAP;AANR;AAQH,SAfS;;AAgBV,YAAIH,KAAJ,CAAUA,KAAV,EAAiB;AACb,cAAIC,EAAE,GAAG,IAAT;AACA,cAAIC,KAAK,GAAGD,EAAE,CAACP,OAAf;AACAQ,UAAAA,KAAK,CAACF,KAAN,GAAcA,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAAnC;AACH;;AApBS,OAAd;AAsBA,aAAOH,OAAP;AACH;;;;AA3DD;;;wBAGe;AACX,aAAO,KAAKE,MAAL,CAAYQ,QAAZ,IAAwB,EAA/B;AACH;;;wBASe;AACZ,aAAO,KAAKR,MAAL,CAAYS,SAAnB;AACH;AACD;;;;;;wBAGuB;AACnB,aAAO,KAAKT,MAAL,CAAYU,gBAAnB;AACH;;;wBACkB;AACf,aAAO,KAAKV,MAAL,CAAYW,YAAnB;AACH;;;wBACc;AACX,aAAO,KAAKX,MAAL,CAAYY,QAAnB;AACH;;;;EA7B2BC,mC","sourcesContent":["import { DataControlField } from \"./DataControlField\";\r\nimport { GridViewEditableCell } from \"./GridViewEditableCell\";\r\nexport class BoundField extends DataControlField {\r\n    /**\r\n     * Gets the caption displayed for a field when the field's value is null.\r\n     */\r\n    get nullText() {\r\n        return this.params.nullText || \"\";\r\n    }\r\n    createItemCell(dataItem) {\r\n        let cell = new GridViewEditableCell(this, dataItem);\r\n        cell.style(this.itemStyle);\r\n        return cell;\r\n    }\r\n    /**\r\n     * Gets the field for the value.\r\n     */\r\n    get dataField() {\r\n        return this.params.dataField;\r\n    }\r\n    /**\r\n     * Gets the string that specifies the display format for the value of the field.\r\n     */\r\n    get dataFormatString() {\r\n        return this.params.dataFormatString;\r\n    }\r\n    get controlStyle() {\r\n        return this.params.controlStyle;\r\n    }\r\n    get readOnly() {\r\n        return this.params.readOnly;\r\n    }\r\n    //===============================================\r\n    // Virutal Methods\r\n    createControl() {\r\n        // let control = document.createElement(\"input\");\r\n        // control.name = this.dataField as string;\r\n        // return control;\r\n        let element = document.createElement(\"input\");\r\n        let control = {\r\n            element,\r\n            valueType: this.params.valueType,\r\n            get value() {\r\n                let it = this;\r\n                let input = it.element;\r\n                let text = input.value;\r\n                switch (it.valueType) {\r\n                    case 'number':\r\n                        return new Number(text).valueOf();\r\n                    case 'date':\r\n                        return new Date(text);\r\n                    default:\r\n                        return text;\r\n                }\r\n            },\r\n            set value(value) {\r\n                let it = this;\r\n                let input = it.element;\r\n                input.value = value == null ? \"\" : value;\r\n            }\r\n        };\r\n        return control;\r\n    }\r\n}\r\n"],"file":"BoundField.js"}