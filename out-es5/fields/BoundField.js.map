{"version":3,"sources":["../../out/fields/BoundField.js"],"names":["define","require","exports","DataControlField_1","GridViewEditableCell_1","Object","defineProperty","value","BoundField","dataItem","cell","GridViewEditableCell","style","itemStyle","element","document","createElement","control","valueType","params","it","input","text","Number","valueOf","Date","nullText","dataField","dataFormatString","controlStyle","readOnly","DataControlField"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,CAAC,CAAC,SAAD,EAAY,SAAZ,EAAuB,oBAAvB,EAA6C,wBAA7C,CAAD,EAAyE,UAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,kBAA5B,EAAgDC,sBAAhD,EAAwE;AACnJ;;AACAC,EAAAA,MAAM,CAACC,cAAP,CAAsBJ,OAAtB,EAA+B,YAA/B,EAA6C;AAAEK,IAAAA,KAAK,EAAE;AAAT,GAA7C;;AAFmJ,MAG7IC,UAH6I;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,qCAUhIC,QAVgI,EAUtH;AACrB,YAAIC,IAAI,GAAG,IAAIN,sBAAsB,CAACO,oBAA3B,CAAgD,IAAhD,EAAsDF,QAAtD,CAAX;AACAC,QAAAA,IAAI,CAACE,KAAL,CAAW,KAAKC,SAAhB;AACA,eAAOH,IAAP;AACH;AACD;;;;AAf+I;AAAA;AAiC/I;AACA;AAlC+I,sCAmC/H;AACZ;AACA;AACA;AACA,YAAII,OAAO,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACA,YAAIC,OAAO,GAAG;AACVH,UAAAA,OAAO,EAAPA,OADU;AAEVI,UAAAA,SAAS,EAAE,KAAKC,MAAL,CAAYD,SAFb;;AAGV,cAAIX,KAAJ,GAAY;AACR,gBAAIa,EAAE,GAAG,IAAT;AACA,gBAAIC,KAAK,GAAGD,EAAE,CAACN,OAAf;AACA,gBAAIQ,IAAI,GAAGD,KAAK,CAACd,KAAjB;;AACA,oBAAQa,EAAE,CAACF,SAAX;AACI,mBAAK,QAAL;AACI,uBAAO,IAAIK,MAAJ,CAAWD,IAAX,EAAiBE,OAAjB,EAAP;;AACJ,mBAAK,MAAL;AACI,uBAAO,IAAIC,IAAJ,CAASH,IAAT,CAAP;;AACJ;AACI,uBAAOA,IAAP;AANR;AAQH,WAfS;;AAgBV,cAAIf,KAAJ,CAAUA,KAAV,EAAiB;AACb,gBAAIa,EAAE,GAAG,IAAT;AACA,gBAAIC,KAAK,GAAGD,EAAE,CAACN,OAAf;AACAO,YAAAA,KAAK,CAACd,KAAN,GAAcA,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBA,KAAnC;AACH;;AApBS,SAAd;AAsBA,eAAOU,OAAP;AACH;AA/D8I;AAAA;;AAI/I;;;AAJ+I,0BAOhI;AACX,eAAO,KAAKE,MAAL,CAAYO,QAAZ,IAAwB,EAA/B;AACH;AAT8I;AAAA;AAAA,0BAkB/H;AACZ,eAAO,KAAKP,MAAL,CAAYQ,SAAnB;AACH;AACD;;;;AArB+I;AAAA;AAAA,0BAwBxH;AACnB,eAAO,KAAKR,MAAL,CAAYS,gBAAnB;AACH;AA1B8I;AAAA;AAAA,0BA2B5H;AACf,eAAO,KAAKT,MAAL,CAAYU,YAAnB;AACH;AA7B8I;AAAA;AAAA,0BA8BhI;AACX,eAAO,KAAKV,MAAL,CAAYW,QAAnB;AACH;AAhC8I;;AAAA;AAAA,IAG1H3B,kBAAkB,CAAC4B,gBAHuG;;AAiEnJ7B,EAAAA,OAAO,CAACM,UAAR,GAAqBA,UAArB;AACH,CAlEK,CAAN","sourcesContent":["define([\"require\", \"exports\", \"./DataControlField\", \"./GridViewEditableCell\"], function (require, exports, DataControlField_1, GridViewEditableCell_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class BoundField extends DataControlField_1.DataControlField {\r\n        /**\r\n         * Gets the caption displayed for a field when the field's value is null.\r\n         */\r\n        get nullText() {\r\n            return this.params.nullText || \"\";\r\n        }\r\n        createItemCell(dataItem) {\r\n            let cell = new GridViewEditableCell_1.GridViewEditableCell(this, dataItem);\r\n            cell.style(this.itemStyle);\r\n            return cell;\r\n        }\r\n        /**\r\n         * Gets the field for the value.\r\n         */\r\n        get dataField() {\r\n            return this.params.dataField;\r\n        }\r\n        /**\r\n         * Gets the string that specifies the display format for the value of the field.\r\n         */\r\n        get dataFormatString() {\r\n            return this.params.dataFormatString;\r\n        }\r\n        get controlStyle() {\r\n            return this.params.controlStyle;\r\n        }\r\n        get readOnly() {\r\n            return this.params.readOnly;\r\n        }\r\n        //===============================================\r\n        // Virutal Methods\r\n        createControl() {\r\n            // let control = document.createElement(\"input\");\r\n            // control.name = this.dataField as string;\r\n            // return control;\r\n            let element = document.createElement(\"input\");\r\n            let control = {\r\n                element,\r\n                valueType: this.params.valueType,\r\n                get value() {\r\n                    let it = this;\r\n                    let input = it.element;\r\n                    let text = input.value;\r\n                    switch (it.valueType) {\r\n                        case 'number':\r\n                            return new Number(text).valueOf();\r\n                        case 'date':\r\n                            return new Date(text);\r\n                        default:\r\n                            return text;\r\n                    }\r\n                },\r\n                set value(value) {\r\n                    let it = this;\r\n                    let input = it.element;\r\n                    input.value = value == null ? \"\" : value;\r\n                }\r\n            };\r\n            return control;\r\n        }\r\n    }\r\n    exports.BoundField = BoundField;\r\n});\r\n"],"file":"BoundField.js"}