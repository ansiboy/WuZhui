{"version":3,"sources":["../../out/fields/BoundField.js"],"names":["define","require","exports","DataControlField_1","Errors_1","Utility_1","Object","defineProperty","value","GridViewEditableCell","field","dataItem","valueType","Errors","argumentNull","dataField","nullText","dataFormatString","_field","_dataItem","_valueType","_mode","Date","readOnly","render","controlValue","element","innerHTML","applyStyle","querySelector","controlStyle","undefined","text","Number","valueOf","GridViewDataCell","BoundField","params","_params","_valueElement","document","createElement","cell","style","itemStyle","DataControlField"],"mappings":"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","sourcesContent":["/// <reference path=\"DataControlField.ts\"/>\r\ndefine([\"require\", \"exports\", \"./DataControlField\", \"../Errors\", \"../Utility\"], function (require, exports, DataControlField_1, Errors_1, Utility_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class GridViewEditableCell extends DataControlField_1.GridViewDataCell {\r\n        constructor(field, dataItem, valueType) {\r\n            if (field == null)\r\n                throw Errors_1.Errors.argumentNull('field');\r\n            if (dataItem == null)\r\n                throw Errors_1.Errors.argumentNull('dataItem');\r\n            super({\r\n                dataField: field.dataField,\r\n                nullText: field.nullText, dataFormatString: field.dataFormatString\r\n            });\r\n            this._field = field;\r\n            this._dataItem = dataItem;\r\n            this._valueType = valueType;\r\n            this._mode = 'read';\r\n            if (!this._valueType) {\r\n                let value = dataItem[field.dataField];\r\n                if (value instanceof Date)\r\n                    this._valueType = 'date';\r\n                else\r\n                    this._valueType = typeof value;\r\n            }\r\n        }\r\n        get field() {\r\n            return this._field;\r\n        }\r\n        get mode() {\r\n            return this._mode;\r\n        }\r\n        beginEdit() {\r\n            if (this._field.readOnly) {\r\n                return;\r\n            }\r\n            this._mode = 'edit';\r\n            this.render(this._dataItem);\r\n        }\r\n        endEdit() {\r\n            if (this._field.readOnly) {\r\n                return;\r\n            }\r\n            this._mode = 'read';\r\n            let value = this.controlValue;\r\n            this.render(this._dataItem);\r\n        }\r\n        cancelEdit() {\r\n            if (this._field.readOnly) {\r\n                return;\r\n            }\r\n            this._mode = 'read';\r\n            // let value = this._dataItem[this.field.dataField];\r\n            this.render(this._dataItem);\r\n        }\r\n        render(dataItem) {\r\n            //value\r\n            let value = dataItem[this.field.dataField];\r\n            if (this._mode == 'edit') {\r\n                this.element.innerHTML = `<input type=\"text\" />`;\r\n                Utility_1.applyStyle(this.element.querySelector('input'), this._field.controlStyle);\r\n                this.element.querySelector('input').value =\r\n                    value === undefined ? null : `${value}`;\r\n                return;\r\n            }\r\n            super.render(dataItem);\r\n        }\r\n        //==============================================\r\n        // Virtual Methods\r\n        get controlValue() {\r\n            var text = this.element.querySelector('input').value;\r\n            switch (this._valueType) {\r\n                case 'number':\r\n                    return new Number(text).valueOf();\r\n                case 'date':\r\n                    return new Date(text);\r\n                default:\r\n                    return text;\r\n            }\r\n        }\r\n    }\r\n    exports.GridViewEditableCell = GridViewEditableCell;\r\n    class BoundField extends DataControlField_1.DataControlField {\r\n        constructor(params) {\r\n            super(params);\r\n            this._params = params;\r\n            this._valueElement = document.createElement('span');\r\n        }\r\n        params() {\r\n            return this._params;\r\n        }\r\n        /**\r\n         * Gets the caption displayed for a field when the field's value is null.\r\n         */\r\n        get nullText() {\r\n            return this.params().nullText;\r\n        }\r\n        createItemCell(dataItem) {\r\n            let cell = new GridViewEditableCell(this, dataItem);\r\n            cell.style(this.itemStyle);\r\n            return cell;\r\n        }\r\n        /**\r\n         * Gets the field for the value.\r\n         */\r\n        get dataField() {\r\n            return this.params().dataField;\r\n        }\r\n        /**\r\n         * Gets the string that specifies the display format for the value of the field.\r\n         */\r\n        get dataFormatString() {\r\n            return this.params().dataFormatString;\r\n        }\r\n        get controlStyle() {\r\n            return this.params().controlStyle;\r\n        }\r\n        get readOnly() {\r\n            return this.params().readOnly;\r\n        }\r\n    }\r\n    exports.BoundField = BoundField;\r\n});\r\n"],"file":"BoundField.js"}