{"version":3,"sources":["../../out/fields/GridViewEditableCell.js"],"names":["define","require","exports","DataControlField_1","Errors_1","Utility_1","Object","defineProperty","value","GridViewEditableCell","field","dataItem","Errors","argumentNull","dataField","nullText","dataFormatString","_field","_dataItem","_mode","readOnly","render","element","innerHTML","control","createControl","applyStyle","controlStyle","appendChild","GridViewDataCell"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAAA,MAAM,CAAC,CAAC,SAAD,EAAY,SAAZ,EAAuB,oBAAvB,EAA6C,WAA7C,EAA0D,YAA1D,CAAD,EAA0E,UAAUC,OAAV,EAAmBC,OAAnB,EAA4BC,kBAA5B,EAAgDC,QAAhD,EAA0DC,SAA1D,EAAqE;AACjJ;;AACAC,EAAAA,MAAM,CAACC,cAAP,CAAsBL,OAAtB,EAA+B,YAA/B,EAA6C;AAAEM,IAAAA,KAAK,EAAE;AAAT,GAA7C;;AAFiJ,MAG3IC,oBAH2I;AAAA;AAAA;AAAA;;AAI7I,kCAAYC,KAAZ,EAAmBC,QAAnB,EAA6B;AAAA;;AAAA;;AACzB,UAAID,KAAK,IAAI,IAAb,EACI,MAAMN,QAAQ,CAACQ,MAAT,CAAgBC,YAAhB,CAA6B,OAA7B,CAAN;AACJ,UAAIF,QAAQ,IAAI,IAAhB,EACI,MAAMP,QAAQ,CAACQ,MAAT,CAAgBC,YAAhB,CAA6B,UAA7B,CAAN;AACJ,gGAAM;AACFC,QAAAA,SAAS,EAAEJ,KAAK,CAACI,SADf;AAEFC,QAAAA,QAAQ,EAAEL,KAAK,CAACK,QAFd;AAEwBC,QAAAA,gBAAgB,EAAEN,KAAK,CAACM;AAFhD,OAAN;AAIA,YAAKC,MAAL,GAAcP,KAAd;AACA,YAAKQ,SAAL,GAAiBP,QAAjB;AACA,YAAKQ,KAAL,GAAa,MAAb;AAXyB;AAY5B;;AAhB4I;AAAA;AAAA,kCAuBjI;AACR,YAAI,KAAKF,MAAL,CAAYG,QAAhB,EAA0B;AACtB;AACH;;AACD,aAAKD,KAAL,GAAa,MAAb;AACA,aAAKE,MAAL,CAAY,KAAKH,SAAjB;AACH;AA7B4I;AAAA;AAAA,gCA8BnI;AACN,YAAI,KAAKD,MAAL,CAAYG,QAAhB,EAA0B;AACtB;AACH;;AACD,aAAKD,KAAL,GAAa,MAAb;AACA,aAAKE,MAAL,CAAY,KAAKH,SAAjB;AACH;AApC4I;AAAA;AAAA,mCAqChI;AACT,YAAI,KAAKD,MAAL,CAAYG,QAAhB,EAA0B;AACtB;AACH;;AACD,aAAKD,KAAL,GAAa,MAAb,CAJS,CAKT;;AACA,aAAKE,MAAL,CAAY,KAAKH,SAAjB;AACH;AA5C4I;AAAA;AAAA,6BA6CtIP,QA7CsI,EA6C5H;AACb;AACA,YAAIH,KAAK,GAAGG,QAAQ,CAAC,KAAKD,KAAL,CAAWI,SAAZ,CAApB;;AACA,YAAI,KAAKK,KAAL,IAAc,MAAlB,EAA0B;AACtB;AACA;AACA;AACA;AACA,eAAKG,OAAL,CAAaC,SAAb,GAAyB,EAAzB;AACA,cAAIC,OAAO,GAAG,KAAKC,aAAL,CAAmBjB,KAAnB,CAAd;AACAH,UAAAA,SAAS,CAACqB,UAAV,CAAqBF,OAArB,EAA8B,KAAKP,MAAL,CAAYU,YAA1C;AACA,eAAKL,OAAL,CAAaM,WAAb,CAAyBJ,OAAzB;AACA;AACH;;AACD,yFAAab,QAAb;AACH;AA5D4I;AAAA;AAAA,0BAiBjI;AACR,eAAO,KAAKM,MAAZ;AACH;AAnB4I;AAAA;AAAA,0BAoBlI;AACP,eAAO,KAAKE,KAAZ;AACH;AAtB4I;;AAAA;AAAA,IAG9GhB,kBAAkB,CAAC0B,gBAH2F;;AA8DjJ3B,EAAAA,OAAO,CAACO,oBAAR,GAA+BA,oBAA/B;AACH,CA/DK,CAAN","sourcesContent":["define([\"require\", \"exports\", \"./DataControlField\", \"../Errors\", \"../Utility\"], function (require, exports, DataControlField_1, Errors_1, Utility_1) {\n    \"use strict\";\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    class GridViewEditableCell extends DataControlField_1.GridViewDataCell {\n        constructor(field, dataItem) {\n            if (field == null)\n                throw Errors_1.Errors.argumentNull('field');\n            if (dataItem == null)\n                throw Errors_1.Errors.argumentNull('dataItem');\n            super({\n                dataField: field.dataField,\n                nullText: field.nullText, dataFormatString: field.dataFormatString\n            });\n            this._field = field;\n            this._dataItem = dataItem;\n            this._mode = 'read';\n        }\n        get field() {\n            return this._field;\n        }\n        get mode() {\n            return this._mode;\n        }\n        beginEdit() {\n            if (this._field.readOnly) {\n                return;\n            }\n            this._mode = 'edit';\n            this.render(this._dataItem);\n        }\n        endEdit() {\n            if (this._field.readOnly) {\n                return;\n            }\n            this._mode = 'read';\n            this.render(this._dataItem);\n        }\n        cancelEdit() {\n            if (this._field.readOnly) {\n                return;\n            }\n            this._mode = 'read';\n            // let value = this._dataItem[this.field.dataField];\n            this.render(this._dataItem);\n        }\n        render(dataItem) {\n            //value\n            let value = dataItem[this.field.dataField];\n            if (this._mode == 'edit') {\n                // this.element.innerHTML = `<input type=\"text\" />`;\n                // applyStyle(this.element.querySelector('input'), this._field.controlStyle);\n                // this.element.querySelector('input').value =\n                //     value === undefined ? null : `${value}`;\n                this.element.innerHTML = \"\";\n                let control = this.createControl(value);\n                Utility_1.applyStyle(control, this._field.controlStyle);\n                this.element.appendChild(control);\n                return;\n            }\n            super.render(dataItem);\n        }\n    }\n    exports.GridViewEditableCell = GridViewEditableCell;\n});\n"],"file":"GridViewEditableCell.js"}