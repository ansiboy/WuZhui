{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./out/Control.js","webpack:///./out/DataSource.js","webpack:///./out/DropDown.js","webpack:///./out/Errors.js","webpack:///./out/GridView.js","webpack:///./out/NumberPagingBar.js","webpack:///./out/TextBox.js","webpack:///./out/Utility.js","webpack:///./out/fields/BoundField.js","webpack:///./out/fields/CommandField.js","webpack:///./out/fields/CustomField.js","webpack:///./out/fields/DataControlField.js","webpack:///./out/index.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,sDAAU,EAAE,wDAAW,CAAC,mCAAE;AACxD;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;AACF;;;;;;;;;;;;ACtDA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,iCAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,sDAAU,EAAE,wDAAW,CAAC,mCAAE;AACxD;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B;AACrE,wBAAwB;AACxB,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA;AACA,CAAC;AAAA,oGAAC;AACF;;;;;;;;;;;;AC7KA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA,iCAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,wDAAW,EAAE,sDAAU,CAAC,mCAAE;AACxD;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;ACzCF,iGAAO,CAAC,mBAAS,EAAE,OAAS,CAAC,mCAAE;AAC/B;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,IAAI;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa,GAAG,UAAU;AAC5D;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;AACF;;;;;;;;;;;;AC1CA,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,wDAAW,EAAE,8DAAc,EAAE,wFAA2B,EAAE,wEAAmB,EAAE,wDAAW,EAAE,sDAAU,CAAC,mCAAE;AACvI;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,4EAA4E;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,0BAA0B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,wEAAwE;AAChJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,sBAAsB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,0BAA0B;AACzF,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA;AACA;AACA,2BAA2B,oCAAoC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kBAAkB;AACjD;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;AACF;;;;;;;;;;;;ACpSA,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,sDAAU,EAAE,8DAAc,CAAC,mCAAE;AAC3D;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,sEAAsE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4BAA4B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4BAA4B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;AACF;;;;;;;;;;;;ACrhBA,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,wDAAW,EAAE,sDAAU,CAAC,mCAAE;AACxD;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,0CAA0C;AAC3D;AACA,+BAA+B,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;ACjCF,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,sDAAU,CAAC,mCAAE;AAC3C;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;AACF;;;;;;;;;;;;AChFA;AACA,iCAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,iFAAoB,EAAE,uDAAW,EAAE,yDAAY,CAAC,mCAAE;AAChF;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,MAAM;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;AC1HF;AACA,iCAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,iFAAoB,EAAE,yDAAY,EAAE,qEAAc,EAAE,yDAAY,CAAC,mCAAE;AACjG;AACA,kDAAkD,cAAc;AAChxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,8FAA8F;AAC9F;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;AC7SF,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,iFAAoB,CAAC,mCAAE;AACrD;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;ACpCF,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,yDAAY,EAAE,yDAAY,EAAE,uDAAW,CAAC,mCAAE;AACxE;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,MAAM;AAChC;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,4CAA4C;AAC5C,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,EAAE,GAAG,EAAE,GAAG,EAAE;AAC1C;AACA,8BAA8B,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AACpD;AACA,8BAA8B,EAAE,GAAG,YAAY,GAAG,YAAY,GAAG,YAAY,GAAG,YAAY;AAC5F;AACA,8BAA8B,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AACzD;AACA,8BAA8B,EAAE,GAAG,YAAY,GAAG,YAAY,GAAG,YAAY,GAAG,YAAY,GAAG,YAAY;AAC3G;AACA,8BAA8B,EAAE,GAAG,EAAE;AACrC;AACA,8BAA8B,EAAE,GAAG,EAAE,GAAG,EAAE;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,WAAW;AACnE;AACA;AACA;AACA;AACA,2DAA2D,WAAW;AACtE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC;;;;;;;;;;;;ACxQF,iGAAO,CAAC,mBAAS,EAAE,OAAS,EAAE,0DAAY,EAAE,4EAAqB,EAAE,gFAAuB,EAAE,8EAAsB,EAAE,wFAA2B,EAAE,0DAAY,EAAE,wDAAW,EAAE,8DAAc,EAAE,wEAAmB,CAAC,mCAAE;AAClN;AACA,kDAAkD,cAAc;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAA,oGAAC","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./out/index.js\");\n","define([\"require\", \"exports\", \"./Errors\", \"./Utility\"], function (require, exports, Errors_1, Utility_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    // namespace wuzhui {\r\n    const CONTROL_DATA_NAME = 'Control';\r\n    class Control {\r\n        constructor(element) {\r\n            if (!element)\r\n                throw Errors_1.Errors.argumentNull('element');\r\n            this._element = element;\r\n            Utility_1.ElementHelper.data(element, CONTROL_DATA_NAME, this);\r\n        }\r\n        get visible() {\r\n            return Utility_1.ElementHelper.isVisible(this._element);\r\n        }\r\n        set visible(value) {\r\n            if (value) {\r\n                Utility_1.ElementHelper.showElement(this._element);\r\n            }\r\n            else {\r\n                Utility_1.ElementHelper.hideElement(this._element);\r\n            }\r\n        }\r\n        get element() {\r\n            return this._element;\r\n        }\r\n        appendChild(child, index) {\r\n            if (child == null)\r\n                throw Errors_1.Errors.argumentNull('child');\r\n            let childElement;\r\n            if (child instanceof Control)\r\n                childElement = child.element;\r\n            else\r\n                childElement = child;\r\n            let placeChild;\r\n            if (index != null) {\r\n                placeChild = this.element.children[index];\r\n            }\r\n            if (placeChild == null) {\r\n                this.element.appendChild(childElement);\r\n            }\r\n            else {\r\n                this.element.insertBefore(childElement, placeChild);\r\n            }\r\n        }\r\n        style(value) {\r\n            Utility_1.applyStyle(this.element, value);\r\n        }\r\n        static getControlByElement(element) {\r\n            return Utility_1.ElementHelper.data(element, CONTROL_DATA_NAME);\r\n        }\r\n    }\r\n    exports.Control = Control;\r\n});\r\n// }\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\ndefine([\"require\", \"exports\", \"./Errors\", \"./Utility\"], function (require, exports, Errors_1, Utility_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class DataSource {\r\n        constructor(args) {\r\n            this.inserting = Utility_1.callbacks1();\r\n            this.inserted = Utility_1.callbacks1();\r\n            this.deleting = Utility_1.callbacks();\r\n            this.deleted = Utility_1.callbacks();\r\n            this.updating = Utility_1.callbacks();\r\n            this.updated = Utility_1.callbacks();\r\n            this.selecting = Utility_1.callbacks();\r\n            this.selected = Utility_1.callbacks();\r\n            this.error = Utility_1.callbacks();\r\n            this.args = args;\r\n            this.primaryKeys = args.primaryKeys || [];\r\n        }\r\n        get canDelete() {\r\n            return this.args.delete != null && this.primaryKeys.length > 0;\r\n        }\r\n        get canInsert() {\r\n            return this.args.insert != null && this.primaryKeys.length > 0;\r\n        }\r\n        get canUpdate() {\r\n            return this.args.update != null && this.primaryKeys.length > 0;\r\n        }\r\n        executeInsert(item, args) {\r\n            return this.args.insert(item, args);\r\n        }\r\n        executeDelete(item, args) {\r\n            return this.args.delete(item, args);\r\n        }\r\n        executeUpdate(item, args) {\r\n            return this.args.update(item, args);\r\n        }\r\n        executeSelect(args) {\r\n            return this.args.select(args);\r\n        }\r\n        insert(item, args, index) {\r\n            if (!this.canInsert)\r\n                throw Errors_1.Errors.dataSourceCanntInsert();\r\n            if (!item)\r\n                throw Errors_1.Errors.argumentNull(\"item\");\r\n            if (typeof args == 'number') {\r\n                index = args;\r\n                args = null;\r\n            }\r\n            this.inserting.fire(this, item, index);\r\n            return this.executeInsert(item, args).then((data) => {\r\n                Object.assign(item, data);\r\n                this.inserted.fire(this, item, index);\r\n                return data;\r\n            }).catch(exc => {\r\n                this.processError(exc, 'insert');\r\n                throw exc;\r\n            });\r\n        }\r\n        delete(item, args) {\r\n            if (!this.canDelete)\r\n                throw Errors_1.Errors.dataSourceCanntDelete();\r\n            if (!item)\r\n                throw Errors_1.Errors.argumentNull(\"item\");\r\n            this.checkPrimaryKeys(item);\r\n            this.deleting.fire(this, item);\r\n            return this.executeDelete(item, args).then((data) => {\r\n                this.deleted.fire(this, item);\r\n                return data;\r\n            }).catch(exc => {\r\n                this.processError(exc, 'delete');\r\n                throw exc;\r\n            });\r\n        }\r\n        update(item, args) {\r\n            if (!this.canUpdate)\r\n                throw Errors_1.Errors.dataSourceCanntUpdate();\r\n            if (!item)\r\n                throw Errors_1.Errors.argumentNull(\"item\");\r\n            this.checkPrimaryKeys(item);\r\n            this.updating.fire(this, item);\r\n            return this.executeUpdate(item, args).then((data) => {\r\n                Object.assign(item, data);\r\n                this.updated.fire(this, item);\r\n                return data;\r\n            }).catch((exc) => {\r\n                this.processError(exc, 'update');\r\n                throw exc;\r\n            });\r\n        }\r\n        isSameItem(theItem, otherItem) {\r\n            if (theItem == null)\r\n                throw Errors_1.Errors.argumentNull('theItem');\r\n            if (otherItem == null)\r\n                throw Errors_1.Errors.argumentNull('otherItem');\r\n            if (this.primaryKeys.length == 0)\r\n                return theItem == otherItem;\r\n            this.checkPrimaryKeys(theItem);\r\n            this.checkPrimaryKeys(otherItem);\r\n            for (let pk of this.primaryKeys) {\r\n                if (theItem[pk] != otherItem[pk])\r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n        checkPrimaryKeys(item) {\r\n            for (let key in item) {\r\n                if (item[key] == null && this.primaryKeys.indexOf(key) >= 0)\r\n                    throw Errors_1.Errors.primaryKeyNull(key);\r\n            }\r\n        }\r\n        select(args) {\r\n            console.assert(args != null);\r\n            Utility_1.fireCallback(this.selecting, this, args);\r\n            return this.executeSelect(args).then((data) => {\r\n                let dataItems;\r\n                let totalRowCount;\r\n                if (Array.isArray(data)) {\r\n                    dataItems = data;\r\n                    totalRowCount = data.length;\r\n                }\r\n                else if (data.dataItems !== undefined && data.totalRowCount !== undefined) {\r\n                    dataItems = data.dataItems;\r\n                    totalRowCount = data.totalRowCount;\r\n                }\r\n                else {\r\n                    throw Errors_1.Errors.queryResultTypeError();\r\n                }\r\n                this.selected.fire(this, { totalRowCount, dataItems });\r\n                return { totalRowCount, dataItems };\r\n            }).catch(exc => {\r\n                this.processError(exc, 'select');\r\n                throw exc;\r\n            });\r\n        }\r\n        processError(exc, method) {\r\n            exc.method = method;\r\n            this.error.fire(this, exc);\r\n            if (!exc.handled)\r\n                throw exc;\r\n        }\r\n    }\r\n    exports.DataSource = DataSource;\r\n    class DataSourceSelectArguments {\r\n        constructor() {\r\n            this.startRowIndex = 0;\r\n            this.maximumRows = 2147483647;\r\n        }\r\n    }\r\n    exports.DataSourceSelectArguments = DataSourceSelectArguments;\r\n    class ArrayDataSource extends DataSource {\r\n        constructor(items) {\r\n            super({\r\n                select(args) {\r\n                    return __awaiter(this, void 0, void 0, function* () {\r\n                        if (args.sortExpression) {\r\n                        }\r\n                        let dataItems = items.slice(args.startRowIndex, args.startRowIndex + args.maximumRows);\r\n                        let result = { dataItems, totalRowCount: items.length };\r\n                        return result;\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n    exports.ArrayDataSource = ArrayDataSource;\r\n});\r\n// }\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\ndefine([\"require\", \"exports\", \"./Control\", \"./Errors\"], function (require, exports, Control_1, Errors_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class DropDown extends Control_1.Control {\r\n        constructor(params) {\r\n            super(params.element);\r\n            if (params == null)\r\n                throw Errors_1.Errors.argumentNull('params');\r\n            if (params.dataSource == null)\r\n                throw Errors_1.Errors.argumentFieldNull('params', 'dataSource');\r\n            if (params.element == null)\r\n                throw Errors_1.Errors.argumentFieldNull('params', 'element');\r\n            this.init(params);\r\n        }\r\n        init(params) {\r\n            return __awaiter(this, void 0, void 0, function* () {\r\n                let r = yield params.dataSource.select({});\r\n                r.dataItems.forEach(dataItem => {\r\n                    let option = document.createElement('option');\r\n                    let name = params.nameField ? dataItem[params.nameField] : dataItem;\r\n                    let value = params.valueField ? dataItem[params.valueField] : dataItem;\r\n                    if (name == null)\r\n                        name = '';\r\n                    if (value == null)\r\n                        value = '';\r\n                    option.innerHTML = name;\r\n                    option.value = value;\r\n                    this.element.appendChild(option);\r\n                });\r\n            });\r\n        }\r\n    }\r\n    exports.DropDown = DropDown;\r\n});\r\n","define([\"require\", \"exports\"], function (require, exports) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    // namespace wuzhui {\r\n    class Errors {\r\n        static notImplemented(message) {\r\n            message = message || \"Not implemented\";\r\n            return new Error(message);\r\n        }\r\n        static argumentNull(paramName) {\r\n            return new Error(\"Argument '\" + paramName + \"' can not be null.\");\r\n        }\r\n        static controllBelonsAnother() {\r\n            return new Error(\"The control is belongs another control.\");\r\n        }\r\n        static columnsCanntEmpty() {\r\n            return new Error(\"Columns cannt empty.\");\r\n        }\r\n        static dataSourceCanntInsert() {\r\n            return new Error(\"DataSource can not insert.\");\r\n        }\r\n        static dataSourceCanntUpdate() {\r\n            return new Error(\"DataSource can not update.\");\r\n        }\r\n        static dataSourceCanntDelete() {\r\n            return new Error(\"DataSource can not delete.\");\r\n        }\r\n        static primaryKeyNull(key) {\r\n            let msg = `Primary key named '${key}' value is null.`;\r\n            return new Error(msg);\r\n        }\r\n        static queryResultTypeError() {\r\n            let msg = 'Type of the query result is expected as Array or DataSourceSelectResult.';\r\n            return new Error(msg);\r\n        }\r\n        static argumentFieldNull(argumentName, fieldName) {\r\n            let msg = `Argument ${argumentName} ${fieldName} field can not be null or empty.`;\r\n            return new Error(msg);\r\n        }\r\n    }\r\n    exports.Errors = Errors;\r\n});\r\n// }\r\n","define([\"require\", \"exports\", \"./Control\", \"./DataSource\", \"./fields/DataControlField\", \"./NumberPagingBar\", \"./Utility\", \"./Errors\"], function (require, exports, Control_1, DataSource_1, DataControlField_1, NumberPagingBar_1, Utility_1, Errors_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    // namespace wuzhui {\r\n    var GridViewRowType;\r\n    (function (GridViewRowType) {\r\n        GridViewRowType[GridViewRowType[\"Header\"] = 0] = \"Header\";\r\n        GridViewRowType[GridViewRowType[\"Footer\"] = 1] = \"Footer\";\r\n        GridViewRowType[GridViewRowType[\"Data\"] = 2] = \"Data\";\r\n        GridViewRowType[GridViewRowType[\"Paging\"] = 3] = \"Paging\";\r\n        GridViewRowType[GridViewRowType[\"Empty\"] = 4] = \"Empty\";\r\n    })(GridViewRowType = exports.GridViewRowType || (exports.GridViewRowType = {}));\r\n    function findParentElement(element, parentTagName) {\r\n        console.assert(element != null);\r\n        console.assert(parentTagName != null);\r\n        parentTagName = parentTagName.toUpperCase();\r\n        let p = element.parentElement;\r\n        while (p) {\r\n            if (p.tagName == parentTagName)\r\n                return p;\r\n            p = p.parentElement;\r\n        }\r\n    }\r\n    class GridViewRow extends Control_1.Control {\r\n        constructor(rowType) {\r\n            let element = document.createElement('tr');\r\n            super(element);\r\n            this._rowType = rowType;\r\n        }\r\n        get rowType() {\r\n            return this._rowType;\r\n        }\r\n        get gridView() {\r\n            if (this._gridView == null) {\r\n                let gridViewElement = findParentElement(this.element, 'table');\r\n                console.assert(gridViewElement != null);\r\n                this._gridView = Control_1.Control.getControlByElement(gridViewElement);\r\n                console.assert(this._gridView != null);\r\n            }\r\n            return this._gridView;\r\n        }\r\n        get cells() {\r\n            let cells = new Array();\r\n            for (let i = 0; i < this.element.cells.length; i++) {\r\n                let cell = Control_1.Control.getControlByElement(this.element.cells[i]);\r\n                console.assert(cell != null);\r\n                cells[i] = cell;\r\n            }\r\n            return cells;\r\n        }\r\n    }\r\n    exports.GridViewRow = GridViewRow;\r\n    class GridViewDataRow extends GridViewRow {\r\n        constructor(gridView, dataItem) {\r\n            super(GridViewRowType.Data);\r\n            this._dataItem = dataItem;\r\n            for (var i = 0; i < gridView.columns.length; i++) {\r\n                var column = gridView.columns[i];\r\n                var cell = column.createItemCell(dataItem);\r\n                cell.visible = column.visible;\r\n                this.appendChild(cell);\r\n            }\r\n        }\r\n        get dataItem() {\r\n            return this._dataItem;\r\n        }\r\n    }\r\n    exports.GridViewDataRow = GridViewDataRow;\r\n    class GridView extends Control_1.Control {\r\n        constructor(params) {\r\n            super(params.element || document.createElement('table'));\r\n            this.emptyDataHTML = '暂无记录';\r\n            this.initDataHTML = '数据正在加载中...';\r\n            this.loadFailHTML = '加载数据失败，点击重新加载。';\r\n            //========================================================\r\n            // 样式\r\n            // headerStyle: string;\r\n            // footerStyle: string;\r\n            // rowStyle: string;\r\n            // alternatingRowStyle: string;\r\n            //private emptyDataRowStyle: string;\r\n            //========================================================\r\n            this.rowCreated = Utility_1.callbacks();\r\n            params = Object.assign({\r\n                showHeader: true, showFooter: false,\r\n                allowPaging: false\r\n            }, params);\r\n            this._params = params;\r\n            this._columns = params.columns || [];\r\n            if (this._columns.length == 0)\r\n                throw Errors_1.Errors.columnsCanntEmpty();\r\n            for (var i = 0; i < this._columns.length; i++) {\r\n                var column = this._columns[i];\r\n                column.gridView = this;\r\n            }\r\n            this._dataSource = params.dataSource;\r\n            this._dataSource.selected.add((sender, e) => this.on_selectExecuted(e.dataItems));\r\n            this._dataSource.updated.add((sender, item) => this.on_updateExecuted(item));\r\n            this._dataSource.inserted.add((sender, item, index) => this.on_insertExecuted(item, index));\r\n            this._dataSource.deleted.add((sender, item) => this.on_deleteExecuted(item));\r\n            this._dataSource.selecting.add((sender, e) => {\r\n                let display = this._emtpyRow.element.style.display;\r\n                if (display != 'none') {\r\n                    this._emtpyRow.element.cells[0].innerHTML = this.initDataHTML;\r\n                }\r\n            });\r\n            this._dataSource.error.add((sender, e) => {\r\n                if (e.method == 'select') {\r\n                    this.on_selectExecuted([]);\r\n                    var element = this._emtpyRow.cells[0].element;\r\n                    element.innerHTML = this.loadFailHTML;\r\n                    element.onclick = () => {\r\n                        this._dataSource.select(this.selectArguments);\r\n                    };\r\n                    e.handled = true;\r\n                    console.error(e.message);\r\n                    console.log(e.stack);\r\n                }\r\n            });\r\n            if (params.showHeader) {\r\n                this._header = new Control_1.Control(document.createElement('thead'));\r\n                this.appendChild(this._header);\r\n                this.appendHeaderRow();\r\n            }\r\n            this.emptyDataHTML = params.emptyDataHTML || this.emptyDataHTML;\r\n            this.initDataHTML = params.initDataHTML || this.initDataHTML;\r\n            this._body = new Control_1.Control(document.createElement('tbody'));\r\n            this.appendChild(this._body);\r\n            this.appendEmptyRow();\r\n            let allowPaging = params.pageSize;\r\n            if (params.showFooter || allowPaging) {\r\n                this._footer = new Control_1.Control(document.createElement('tfoot'));\r\n                this.appendChild(this._footer);\r\n                if (params.showFooter)\r\n                    this.appendFooterRow();\r\n                if (allowPaging) {\r\n                    this.createPagingBar(params.pagerSettings);\r\n                    this.pagingBar.selectArguments.maximumRows = params.pageSize;\r\n                }\r\n            }\r\n            this.selectArguments = this.pagingBar ? this.pagingBar.selectArguments : new DataSource_1.DataSourceSelectArguments();\r\n            this.dataSource.select(this.selectArguments);\r\n        }\r\n        createPagingBar(pagerSettings) {\r\n            var pagingBarContainer = document.createElement('tr');\r\n            var pagingBarElement = document.createElement('td');\r\n            pagingBarElement.className = GridView.pagingBarClassName;\r\n            pagingBarElement.colSpan = this.columns.length;\r\n            pagingBarContainer.appendChild(pagingBarElement);\r\n            console.assert(this._footer != null);\r\n            this._footer.appendChild(pagingBarContainer);\r\n            this.pagingBar = new NumberPagingBar_1.DataSourcePagingBar({ dataSource: this.dataSource, element: pagingBarElement, pagerSettings });\r\n        }\r\n        get columns() {\r\n            return this._columns;\r\n        }\r\n        get dataSource() {\r\n            return this._dataSource;\r\n        }\r\n        appendEmptyRow() {\r\n            this._emtpyRow = new GridViewRow(GridViewRowType.Empty);\r\n            this._emtpyRow.element.className = GridView.emptyRowClassName;\r\n            let cell = new DataControlField_1.GridViewCell();\r\n            cell.element.colSpan = this.columns.length;\r\n            if (!this._params.emptyDataRowStyle) {\r\n                Utility_1.applyStyle(cell.element, this._params.emptyDataRowStyle);\r\n            }\r\n            this._emtpyRow.appendChild(cell);\r\n            this._body.appendChild(this._emtpyRow);\r\n            Utility_1.fireCallback(this.rowCreated, this, { row: this._emtpyRow });\r\n        }\r\n        appendDataRow(dataItem, index) {\r\n            var row = new GridViewDataRow(this, dataItem);\r\n            row.element.className = GridView.dataRowClassName;\r\n            this._body.appendChild(row, index);\r\n            let cells = row.cells;\r\n            for (let j = 0; j < cells.length; j++) {\r\n                let cell = cells[j];\r\n                if (cell instanceof DataControlField_1.GridViewDataCell) {\r\n                    cell.render(dataItem);\r\n                }\r\n            }\r\n            Utility_1.fireCallback(this.rowCreated, this, { row });\r\n            if (this._emtpyRow.element.style.display != 'none')\r\n                this.hideEmptyRow();\r\n            return row;\r\n        }\r\n        on_sort(sender, args) {\r\n            if (this._currentSortCell != null && this._currentSortCell != sender) {\r\n                this._currentSortCell.clearSortIcon();\r\n            }\r\n            this._currentSortCell = sender;\r\n        }\r\n        appendHeaderRow() {\r\n            var row = new GridViewRow(GridViewRowType.Header);\r\n            for (var i = 0; i < this.columns.length; i++) {\r\n                var column = this.columns[i];\r\n                let cell = column.createHeaderCell();\r\n                if (cell instanceof DataControlField_1.GridViewHeaderCell) {\r\n                    cell.sorting.add((e, a) => this.on_sort(e, a));\r\n                }\r\n                row.appendChild(cell);\r\n                cell.visible = this.columns[i].visible;\r\n            }\r\n            this._header.appendChild(row);\r\n        }\r\n        appendFooterRow() {\r\n            var row = new GridViewRow(GridViewRowType.Footer);\r\n            for (var i = 0; i < this.columns.length; i++) {\r\n                var column = this.columns[i];\r\n                let cell = column.createFooterCell();\r\n                row.appendChild(cell);\r\n                cell.visible = column.visible;\r\n            }\r\n            this._footer.appendChild(row);\r\n        }\r\n        on_selectExecuted(items) {\r\n            var rows = this._body.element.querySelectorAll(`.${GridView.dataRowClassName}`);\r\n            for (let i = 0; i < rows.length; i++)\r\n                this._body.element.removeChild(rows[i]);\r\n            if (items.length == 0) {\r\n                this.showEmptyRow();\r\n                return;\r\n            }\r\n            for (let i = 0; i < items.length; i++) {\r\n                this.appendDataRow(items[i]);\r\n            }\r\n        }\r\n        on_updateExecuted(item) {\r\n            console.assert(item != null);\r\n            for (let i = 0; i < this._body.element.rows.length; i++) {\r\n                let row_element = this._body.element.rows[i];\r\n                let row = Control_1.Control.getControlByElement(row_element);\r\n                ;\r\n                if (!(row instanceof GridViewDataRow))\r\n                    continue;\r\n                let dataItem = row.dataItem;\r\n                if (!this.dataSource.isSameItem(dataItem, item))\r\n                    continue;\r\n                if (dataItem != item) {\r\n                    Object.assign(dataItem, item);\r\n                }\r\n                let cells = row.cells;\r\n                for (let j = 0; j < cells.length; j++) {\r\n                    let cell = cells[j];\r\n                    if (cell instanceof DataControlField_1.GridViewDataCell) {\r\n                        // let value = cell.dataField ? item[cell.dataField] : item;\r\n                        // let value = Object.assign({}, dataItem, item);\r\n                        cell.render(dataItem);\r\n                        // if (cell.dataField)\r\n                        //     dataItem[cell.dataField] = value;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        on_insertExecuted(item, index) {\r\n            if (index == null)\r\n                index = 0;\r\n            this.appendDataRow(item, index);\r\n        }\r\n        on_deleteExecuted(item) {\r\n            let dataRowsCount = 0;\r\n            let rows = this._body.element.rows;\r\n            let dataRows = new Array();\r\n            for (let i = 0; i < rows.length; i++) {\r\n                let row = Control_1.Control.getControlByElement(rows.item(i));\r\n                if ((row instanceof GridViewDataRow))\r\n                    dataRows.push(row);\r\n            }\r\n            for (let i = 0; i < dataRows.length; i++) {\r\n                let dataRow = dataRows[i];\r\n                if (!this.dataSource.isSameItem(item, dataRow.dataItem))\r\n                    continue;\r\n                dataRow.element.remove();\r\n                if (dataRows.length == 1)\r\n                    this.showEmptyRow();\r\n            }\r\n        }\r\n        showEmptyRow() {\r\n            this._emtpyRow.element.cells[0].innerHTML = this.emptyDataHTML;\r\n            this._emtpyRow.element.style.removeProperty('display');\r\n        }\r\n        hideEmptyRow() {\r\n            this._emtpyRow.element.style.display = 'none';\r\n        }\r\n    }\r\n    GridView.emptyRowClassName = 'empty';\r\n    GridView.dataRowClassName = 'data';\r\n    GridView.pagingBarClassName = 'pagingBar';\r\n    exports.GridView = GridView;\r\n});\r\n// }\r\n","define([\"require\", \"exports\", \"./Errors\", \"./DataSource\"], function (require, exports, Errors_1, DataSource_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    // namespace wuzhui {\r\n    var PagerPosition;\r\n    (function (PagerPosition) {\r\n        PagerPosition[PagerPosition[\"Bottom\"] = 0] = \"Bottom\";\r\n        PagerPosition[PagerPosition[\"Top\"] = 1] = \"Top\";\r\n        PagerPosition[PagerPosition[\"TopAndBottom\"] = 2] = \"TopAndBottom\";\r\n    })(PagerPosition = exports.PagerPosition || (exports.PagerPosition = {}));\r\n    ;\r\n    class PagingBar {\r\n        init(dataSource, selectArguments) {\r\n            // if (dataSource == null)\r\n            //     throw Errors.argumentNull('dataSource');\r\n            this._pageIndex = 0;\r\n            this._selectArguments = selectArguments || new DataSource_1.DataSourceSelectArguments();\r\n            var pagingBar = this;\r\n            pagingBar.totalRowCount = 1000000;\r\n            if (dataSource) {\r\n                dataSource.selected.add((source, args) => {\r\n                    pagingBar.pageSize = this._selectArguments.maximumRows;\r\n                    var totalRowCount = args.totalRowCount;\r\n                    if (totalRowCount != null && totalRowCount >= 0) {\r\n                        pagingBar.totalRowCount = totalRowCount;\r\n                    }\r\n                    var startRowIndex = this._selectArguments.startRowIndex;\r\n                    if (startRowIndex == null || startRowIndex <= 0)\r\n                        startRowIndex = 0;\r\n                    pagingBar.pageIndex = Math.floor(startRowIndex / pagingBar.pageSize);\r\n                    pagingBar.render();\r\n                });\r\n                dataSource.deleted.add(function () {\r\n                    pagingBar.totalRowCount = pagingBar.totalRowCount - 1;\r\n                    pagingBar.render();\r\n                });\r\n                dataSource.inserted.add(function () {\r\n                    pagingBar.totalRowCount = pagingBar.totalRowCount + 1;\r\n                    pagingBar.render();\r\n                });\r\n            }\r\n        }\r\n        get selectArguments() {\r\n            return this._selectArguments;\r\n        }\r\n        get pageCount() {\r\n            var pageCount = Math.ceil(this.totalRowCount / this.pageSize);\r\n            return pageCount;\r\n        }\r\n        get pageSize() {\r\n            return this._pageSize;\r\n        }\r\n        set pageSize(value) {\r\n            this._pageSize = value;\r\n        }\r\n        get pageIndex() {\r\n            return this._pageIndex;\r\n        }\r\n        set pageIndex(value) {\r\n            this._pageIndex = value;\r\n        }\r\n        get totalRowCount() {\r\n            return this._totalRowCount;\r\n        }\r\n        set totalRowCount(value) {\r\n            this._totalRowCount = value;\r\n        }\r\n        // Virtual Method\r\n        render() {\r\n            throw Errors_1.Errors.notImplemented('The table-row render method is not implemented.');\r\n        }\r\n    }\r\n    exports.PagingBar = PagingBar;\r\n    class DataSourcePagingBar extends PagingBar {\r\n        constructor(params) {\r\n            if (!params.dataSource)\r\n                throw Errors_1.Errors.argumentNull('dataSource');\r\n            if (!params.element)\r\n                throw Errors_1.Errors.argumentNull('element');\r\n            let pagerSettings = Object.assign({\r\n                pageButtonCount: 10,\r\n                firstPageText: '<<',\r\n                lastPageText: '>>',\r\n                nextPageText: '...',\r\n                previousPageText: '...',\r\n                showTotal: true,\r\n            }, params.pagerSettings || {});\r\n            super();\r\n            this.dataSource = params.dataSource;\r\n            this.pagerSettings = pagerSettings;\r\n            this.element = params.element;\r\n            this.numberButtons = new Array();\r\n            this.createButton = this.createPagingButton;\r\n            this.createLabel = this.createTotalLabel;\r\n            let buttonContainer = pagerSettings.buttonContainerWraper ?\r\n                document.createElement(pagerSettings.buttonContainerWraper) :\r\n                document.createElement('div');\r\n            buttonContainer.className = pagerSettings.buttonContainerClassName || \"buttons\";\r\n            this.element.appendChild(buttonContainer);\r\n            this.createPreviousButtons(buttonContainer);\r\n            this.createNumberButtons(buttonContainer);\r\n            this.createNextButtons(buttonContainer);\r\n            if (this.pagerSettings.showTotal) {\r\n                this.totalElement = this.createLabel();\r\n                this.totalElement.visible = false;\r\n            }\r\n            this.init(params.dataSource, params.selectArguments);\r\n        }\r\n        createPagingButton(container) {\r\n            var pagerSettings = this.pagerSettings;\r\n            let button = document.createElement('a');\r\n            button.href = 'javascript:';\r\n            if (this.pagerSettings.buttonWrapper) {\r\n                let w = document.createElement(this.pagerSettings.buttonWrapper);\r\n                w.appendChild(button);\r\n                container.appendChild(w);\r\n            }\r\n            else {\r\n                container.appendChild(button);\r\n            }\r\n            let result = {\r\n                _button: button,\r\n                get visible() {\r\n                    let button = this._button;\r\n                    return button.style.display != 'none';\r\n                },\r\n                set visible(value) {\r\n                    let button = this._button;\r\n                    let element = pagerSettings.buttonWrapper ? button.parentElement : button;\r\n                    if (value) {\r\n                        element.style.removeProperty('display');\r\n                    }\r\n                    else {\r\n                        element.style.display = 'none';\r\n                    }\r\n                },\r\n                get pageIndex() {\r\n                    let button = this._button;\r\n                    return new Number(button.getAttribute('pageIndex')).valueOf();\r\n                },\r\n                set pageIndex(value) {\r\n                    let button = this._button;\r\n                    button.setAttribute('pageIndex', value);\r\n                },\r\n                get text() {\r\n                    let button = this._button;\r\n                    return button.innerHTML;\r\n                },\r\n                set text(value) {\r\n                    let button = this._button;\r\n                    button.innerHTML = value;\r\n                },\r\n                get active() {\r\n                    let button = this._button;\r\n                    return button.href != null;\r\n                },\r\n                set active(value) {\r\n                    let button = this._button;\r\n                    if (value == true) {\r\n                        button.removeAttribute('href');\r\n                        if (pagerSettings.activeButtonClassName) {\r\n                            // button.className = pagerSettings.activeButtonClassName;\r\n                            this.setClassName(pagerSettings.activeButtonClassName);\r\n                        }\r\n                        return;\r\n                    }\r\n                    button.href = 'javascript:';\r\n                    if (pagerSettings.buttonClassName)\r\n                        this.setClassName(pagerSettings.buttonClassName);\r\n                    else\r\n                        this.setClassName(null);\r\n                },\r\n                setClassName(value) {\r\n                    let button = this._button;\r\n                    let element = pagerSettings.buttonWrapper ? button.parentElement : button;\r\n                    if (value)\r\n                        element.className = value;\r\n                    else\r\n                        element.removeAttribute('class');\r\n                },\r\n                onclick: null\r\n            };\r\n            button.onclick = () => {\r\n                if (result.onclick) {\r\n                    result.onclick(result, this);\r\n                }\r\n            };\r\n            return result;\r\n        }\r\n        createTotalLabel() {\r\n            let totalElement = document.createElement('div');\r\n            totalElement.className = 'total';\r\n            let textElement = document.createElement('span');\r\n            textElement.className = 'text';\r\n            textElement.innerHTML = '总记录：';\r\n            totalElement.appendChild(textElement);\r\n            let numberElement = document.createElement('span');\r\n            numberElement.className = 'number';\r\n            totalElement.appendChild(numberElement);\r\n            this.element.appendChild(totalElement);\r\n            return {\r\n                get text() {\r\n                    return numberElement.innerHTML;\r\n                },\r\n                set text(value) {\r\n                    numberElement.innerHTML = value;\r\n                },\r\n                get visible() {\r\n                    let display = totalElement.style.display;\r\n                    return display != 'none';\r\n                },\r\n                set visible(value) {\r\n                    if (value == true)\r\n                        totalElement.style.display = 'block';\r\n                    else\r\n                        totalElement.style.display = 'node';\r\n                }\r\n            };\r\n        }\r\n        createPreviousButtons(buttonContainer) {\r\n            this.firstPageButton = this.createButton(buttonContainer);\r\n            this.firstPageButton.onclick = DataSourcePagingBar.on_buttonClick;\r\n            this.firstPageButton.text = this.pagerSettings.firstPageText;\r\n            this.firstPageButton.visible = false;\r\n            this.previousPageButton = this.createButton(buttonContainer);\r\n            this.previousPageButton.onclick = DataSourcePagingBar.on_buttonClick;\r\n            this.previousPageButton.text = this.pagerSettings.previousPageText;\r\n            this.previousPageButton.visible = false;\r\n        }\r\n        createNextButtons(buttonContainer) {\r\n            this.nextPageButton = this.createButton(buttonContainer);\r\n            this.nextPageButton.onclick = DataSourcePagingBar.on_buttonClick;\r\n            this.nextPageButton.text = this.pagerSettings.nextPageText;\r\n            this.nextPageButton.visible = false;\r\n            this.lastPageButton = this.createButton(buttonContainer);\r\n            this.lastPageButton.onclick = DataSourcePagingBar.on_buttonClick;\r\n            this.lastPageButton.text = this.pagerSettings.lastPageText;\r\n            this.lastPageButton.visible = false;\r\n        }\r\n        createNumberButtons(buttonContainer) {\r\n            let pagingBar = this;\r\n            let buttonCount = this.pagerSettings.pageButtonCount;\r\n            for (let i = 0; i < buttonCount; i++) {\r\n                let button = this.createButton(buttonContainer);\r\n                button.onclick = DataSourcePagingBar.on_buttonClick;\r\n                this.numberButtons[i] = button;\r\n            }\r\n            this.numberButtons.forEach(btn => {\r\n                btn.onclick = () => DataSourcePagingBar.on_buttonClick(btn, pagingBar);\r\n            });\r\n        }\r\n        static on_buttonClick(button, pagingBar) {\r\n            let pageIndex = button.pageIndex;\r\n            if (!pageIndex == null) {\r\n                return;\r\n            }\r\n            let args = pagingBar.selectArguments;\r\n            args.maximumRows = pagingBar.pageSize;\r\n            args.startRowIndex = pageIndex * pagingBar.pageSize;\r\n            pagingBar.pageIndex = pageIndex;\r\n            pagingBar.dataSource.select(pagingBar.selectArguments);\r\n        }\r\n        render() {\r\n            var pagerSettings = this.pagerSettings;\r\n            var buttonCount = pagerSettings.pageButtonCount;\r\n            let pagingBarIndex = Math.floor(this.pageIndex / buttonCount);\r\n            let pagingBarCount = Math.ceil(this.pageCount / buttonCount);\r\n            this.previousPageButton.pageIndex = (pagingBarIndex - 1) * buttonCount;\r\n            this.nextPageButton.pageIndex = (pagingBarIndex + 1) * buttonCount;\r\n            this.firstPageButton.pageIndex = 0;\r\n            this.lastPageButton.pageIndex = this.pageCount - 1;\r\n            for (let i = 0; i < this.numberButtons.length; i++) {\r\n                let pageIndex = pagingBarIndex * buttonCount + i;\r\n                if (pageIndex < this.pageCount) {\r\n                    this.numberButtons[i].pageIndex = pageIndex;\r\n                    this.numberButtons[i].text = (pagingBarIndex * buttonCount + i + 1).toString();\r\n                    this.numberButtons[i].visible = true;\r\n                    this.numberButtons[i].active = pageIndex == this.pageIndex;\r\n                }\r\n                else {\r\n                    this.numberButtons[i].visible = false;\r\n                }\r\n            }\r\n            if (this.totalElement) {\r\n                this.totalElement.text = this.totalRowCount;\r\n                this.totalElement.visible = true;\r\n            }\r\n            this.firstPageButton.visible = false;\r\n            this.previousPageButton.visible = false;\r\n            this.lastPageButton.visible = false;\r\n            this.nextPageButton.visible = false;\r\n            if (pagingBarIndex > 0) {\r\n                this.firstPageButton.visible = true;\r\n                this.previousPageButton.visible = true;\r\n            }\r\n            if (pagingBarIndex < pagingBarCount - 1) {\r\n                this.lastPageButton.visible = true;\r\n                this.nextPageButton.visible = true;\r\n            }\r\n        }\r\n    }\r\n    exports.DataSourcePagingBar = DataSourcePagingBar;\r\n    class NumberPagingBar extends PagingBar {\r\n        constructor(params) {\r\n            if (!params.loadData)\r\n                throw Errors_1.Errors.argumentNull('loadData');\r\n            if (!params.element)\r\n                throw Errors_1.Errors.argumentNull('element');\r\n            let pagerSettings = Object.assign({\r\n                pageButtonCount: 10,\r\n                firstPageText: '<<',\r\n                lastPageText: '>>',\r\n                nextPageText: '...',\r\n                previousPageText: '...',\r\n                showTotal: true,\r\n            }, params.pagerSettings || {});\r\n            super();\r\n            this.loadData = params.loadData;\r\n            this.pagerSettings = pagerSettings;\r\n            this.element = params.element;\r\n            this.numberButtons = new Array();\r\n            this.createButton = this.createPagingButton;\r\n            this.createLabel = this.createTotalLabel;\r\n            let buttonContainer = pagerSettings.buttonContainerWraper ?\r\n                document.createElement(pagerSettings.buttonContainerWraper) :\r\n                document.createElement('div');\r\n            buttonContainer.className = pagerSettings.buttonContainerClassName || \"buttons\";\r\n            this.element.appendChild(buttonContainer);\r\n            this.createPreviousButtons(buttonContainer);\r\n            this.createNumberButtons(buttonContainer);\r\n            this.createNextButtons(buttonContainer);\r\n            if (this.pagerSettings.showTotal) {\r\n                this.totalElement = this.createLabel();\r\n                this.totalElement.visible = false;\r\n            }\r\n            this.init(null, params.selectArguments);\r\n        }\r\n        createPagingButton(container) {\r\n            var pagerSettings = this.pagerSettings;\r\n            let button = document.createElement('a');\r\n            button.href = 'javascript:';\r\n            if (this.pagerSettings.buttonWrapper) {\r\n                let w = document.createElement(this.pagerSettings.buttonWrapper);\r\n                w.appendChild(button);\r\n                container.appendChild(w);\r\n            }\r\n            else {\r\n                container.appendChild(button);\r\n            }\r\n            let result = {\r\n                _button: button,\r\n                get visible() {\r\n                    let button = this._button;\r\n                    return button.style.display != 'none';\r\n                },\r\n                set visible(value) {\r\n                    let button = this._button;\r\n                    let element = pagerSettings.buttonWrapper ? button.parentElement : button;\r\n                    if (value) {\r\n                        element.style.removeProperty('display');\r\n                    }\r\n                    else {\r\n                        element.style.display = 'none';\r\n                    }\r\n                },\r\n                get pageIndex() {\r\n                    let button = this._button;\r\n                    return new Number(button.getAttribute('pageIndex')).valueOf();\r\n                },\r\n                set pageIndex(value) {\r\n                    let button = this._button;\r\n                    button.setAttribute('pageIndex', value);\r\n                },\r\n                get text() {\r\n                    let button = this._button;\r\n                    return button.innerHTML;\r\n                },\r\n                set text(value) {\r\n                    let button = this._button;\r\n                    button.innerHTML = value;\r\n                },\r\n                get active() {\r\n                    let button = this._button;\r\n                    return button.href != null;\r\n                },\r\n                set active(value) {\r\n                    let button = this._button;\r\n                    if (value == true) {\r\n                        button.removeAttribute('href');\r\n                        if (pagerSettings.activeButtonClassName) {\r\n                            // button.className = pagerSettings.activeButtonClassName;\r\n                            this.setClassName(pagerSettings.activeButtonClassName);\r\n                        }\r\n                        return;\r\n                    }\r\n                    button.href = 'javascript:';\r\n                    if (pagerSettings.buttonClassName)\r\n                        this.setClassName(pagerSettings.buttonClassName);\r\n                    else\r\n                        this.setClassName(null);\r\n                },\r\n                setClassName(value) {\r\n                    let button = this._button;\r\n                    let element = pagerSettings.buttonWrapper ? button.parentElement : button;\r\n                    if (value)\r\n                        element.className = value;\r\n                    else\r\n                        element.removeAttribute('class');\r\n                },\r\n                onclick: null\r\n            };\r\n            button.onclick = () => {\r\n                if (result.onclick) {\r\n                    result.onclick(result, this);\r\n                }\r\n            };\r\n            return result;\r\n        }\r\n        createTotalLabel() {\r\n            let totalElement = document.createElement('div');\r\n            totalElement.className = 'total';\r\n            let textElement = document.createElement('span');\r\n            textElement.className = 'text';\r\n            textElement.innerHTML = '总记录：';\r\n            totalElement.appendChild(textElement);\r\n            let numberElement = document.createElement('span');\r\n            numberElement.className = 'number';\r\n            totalElement.appendChild(numberElement);\r\n            this.element.appendChild(totalElement);\r\n            return {\r\n                get text() {\r\n                    return numberElement.innerHTML;\r\n                },\r\n                set text(value) {\r\n                    numberElement.innerHTML = value;\r\n                },\r\n                get visible() {\r\n                    let display = totalElement.style.display;\r\n                    return display != 'none';\r\n                },\r\n                set visible(value) {\r\n                    if (value == true)\r\n                        totalElement.style.display = 'block';\r\n                    else\r\n                        totalElement.style.display = 'node';\r\n                }\r\n            };\r\n        }\r\n        createPreviousButtons(buttonContainer) {\r\n            this.firstPageButton = this.createButton(buttonContainer);\r\n            this.firstPageButton.onclick = NumberPagingBar.on_buttonClick;\r\n            this.firstPageButton.text = this.pagerSettings.firstPageText;\r\n            this.firstPageButton.visible = false;\r\n            this.previousPageButton = this.createButton(buttonContainer);\r\n            this.previousPageButton.onclick = NumberPagingBar.on_buttonClick;\r\n            this.previousPageButton.text = this.pagerSettings.previousPageText;\r\n            this.previousPageButton.visible = false;\r\n        }\r\n        createNextButtons(buttonContainer) {\r\n            this.nextPageButton = this.createButton(buttonContainer);\r\n            this.nextPageButton.onclick = NumberPagingBar.on_buttonClick;\r\n            this.nextPageButton.text = this.pagerSettings.nextPageText;\r\n            this.nextPageButton.visible = false;\r\n            this.lastPageButton = this.createButton(buttonContainer);\r\n            this.lastPageButton.onclick = NumberPagingBar.on_buttonClick;\r\n            this.lastPageButton.text = this.pagerSettings.lastPageText;\r\n            this.lastPageButton.visible = false;\r\n        }\r\n        createNumberButtons(buttonContainer) {\r\n            let pagingBar = this;\r\n            let buttonCount = this.pagerSettings.pageButtonCount;\r\n            for (let i = 0; i < buttonCount; i++) {\r\n                let button = this.createButton(buttonContainer);\r\n                button.onclick = NumberPagingBar.on_buttonClick;\r\n                this.numberButtons[i] = button;\r\n            }\r\n            this.numberButtons.forEach(btn => {\r\n                btn.onclick = () => NumberPagingBar.on_buttonClick(btn, pagingBar);\r\n            });\r\n        }\r\n        static on_buttonClick(button, pagingBar) {\r\n            let pageIndex = button.pageIndex;\r\n            if (!pageIndex == null) {\r\n                return;\r\n            }\r\n            let args = pagingBar.selectArguments;\r\n            args.maximumRows = pagingBar.pageSize;\r\n            args.startRowIndex = pageIndex * pagingBar.pageSize;\r\n            pagingBar.pageIndex = pageIndex;\r\n            //pagingBar.dataSource.select(pagingBar.selectArguments);\r\n            pagingBar.loadData(pageIndex);\r\n        }\r\n        render() {\r\n            var pagerSettings = this.pagerSettings;\r\n            var buttonCount = pagerSettings.pageButtonCount;\r\n            let pagingBarIndex = Math.floor(this.pageIndex / buttonCount);\r\n            let pagingBarCount = Math.ceil(this.pageCount / buttonCount);\r\n            this.previousPageButton.pageIndex = (pagingBarIndex - 1) * buttonCount;\r\n            this.nextPageButton.pageIndex = (pagingBarIndex + 1) * buttonCount;\r\n            this.firstPageButton.pageIndex = 0;\r\n            this.lastPageButton.pageIndex = this.pageCount - 1;\r\n            for (let i = 0; i < this.numberButtons.length; i++) {\r\n                let pageIndex = pagingBarIndex * buttonCount + i;\r\n                if (pageIndex < this.pageCount) {\r\n                    this.numberButtons[i].pageIndex = pageIndex;\r\n                    this.numberButtons[i].text = (pagingBarIndex * buttonCount + i + 1).toString();\r\n                    this.numberButtons[i].visible = true;\r\n                    this.numberButtons[i].active = pageIndex == this.pageIndex;\r\n                }\r\n                else {\r\n                    this.numberButtons[i].visible = false;\r\n                }\r\n            }\r\n            if (this.totalElement) {\r\n                this.totalElement.text = this.totalRowCount;\r\n                this.totalElement.visible = true;\r\n            }\r\n            this.firstPageButton.visible = false;\r\n            this.previousPageButton.visible = false;\r\n            this.lastPageButton.visible = false;\r\n            this.nextPageButton.visible = false;\r\n            if (pagingBarIndex > 0) {\r\n                this.firstPageButton.visible = true;\r\n                this.previousPageButton.visible = true;\r\n            }\r\n            if (pagingBarIndex < pagingBarCount - 1) {\r\n                this.lastPageButton.visible = true;\r\n                this.nextPageButton.visible = true;\r\n            }\r\n        }\r\n    }\r\n    exports.NumberPagingBar = NumberPagingBar;\r\n});\r\n// }\r\n","define([\"require\", \"exports\", \"./Control\", \"./Errors\"], function (require, exports, Control_1, Errors_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class TextBox extends Control_1.Control {\r\n        constructor(params) {\r\n            if (params == null)\r\n                throw Errors_1.Errors.argumentNull(\"params\");\r\n            if (!params.element)\r\n                throw Errors_1.Errors.argumentFieldNull(\"params\", \"element\");\r\n            if (!params.dataField)\r\n                throw Errors_1.Errors.argumentFieldNull(\"params\", \"dataField\");\r\n            if (!params.dataItem)\r\n                throw Errors_1.Errors.argumentFieldNull(\"params\", \"dataItem\");\r\n            if (!params.valueType)\r\n                throw Errors_1.Errors.argumentFieldNull(\"params\", \"valuetype\");\r\n            super(params.element);\r\n            let { element, dataField, dataItem, valueType } = params;\r\n            let value = dataItem[dataField];\r\n            element.value = `${value}`;\r\n            element.onchange = () => {\r\n                if (valueType == 'int') {\r\n                    dataItem[dataField] = Number.parseInt(element.value);\r\n                }\r\n                else if (valueType == 'float') {\r\n                    dataItem[dataField] = Number.parseFloat(element.value);\r\n                }\r\n                else {\r\n                    dataItem[dataField] = element.value;\r\n                }\r\n            };\r\n        }\r\n    }\r\n    exports.TextBox = TextBox;\r\n});\r\n","define([\"require\", \"exports\", \"./Errors\"], function (require, exports, Errors_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class ElementHelper {\r\n        static showElement(element) {\r\n            if (!element)\r\n                throw Errors_1.Errors.argumentNull('element');\r\n            element.style.removeProperty('display');\r\n        }\r\n        static hideElement(element) {\r\n            if (!element)\r\n                throw Errors_1.Errors.argumentNull('element');\r\n            element.style.display = 'none';\r\n        }\r\n        static isVisible(element) {\r\n            let { display } = element.style;\r\n            return !display || display != 'none';\r\n        }\r\n        static data(element, name, value) {\r\n            element['data'] = element['data'] || {};\r\n            if (value == null)\r\n                return element['data'].name;\r\n            element['data'].name = value;\r\n        }\r\n        static findFirstParentByTagName(element, tagName) {\r\n            if (element == null)\r\n                throw Errors_1.Errors.argumentNull(\"element\");\r\n            if (!tagName)\r\n                throw Errors_1.Errors.argumentNull('tagName');\r\n            let parent = element.parentElement;\r\n            while (parent != null) {\r\n                if (parent.tagName.toLowerCase() == tagName.toLowerCase()) {\r\n                    return parent;\r\n                }\r\n                parent = parent.parentElement;\r\n            }\r\n            return null;\r\n        }\r\n    }\r\n    exports.ElementHelper = ElementHelper;\r\n    function applyStyle(element, value) {\r\n        let style = value || '';\r\n        if (typeof style == 'string') {\r\n            element.setAttribute('style', style);\r\n        }\r\n        else {\r\n            for (let key in style) {\r\n                element.style[key] = style[key];\r\n            }\r\n        }\r\n    }\r\n    exports.applyStyle = applyStyle;\r\n    class Callback {\r\n        constructor() {\r\n            this.funcs = new Array();\r\n        }\r\n        add(func) {\r\n            this.funcs.push(func);\r\n        }\r\n        remove(func) {\r\n            this.funcs = this.funcs.filter(o => o != func);\r\n        }\r\n        fire(...args) {\r\n            this.funcs.forEach(o => o(...args));\r\n        }\r\n    }\r\n    exports.Callback = Callback;\r\n    function callbacks() {\r\n        return new Callback();\r\n    }\r\n    exports.callbacks = callbacks;\r\n    function callbacks1() {\r\n        return new Callback();\r\n    }\r\n    exports.callbacks1 = callbacks1;\r\n    function fireCallback(callback, ...args) {\r\n        callback.fire(...args);\r\n    }\r\n    exports.fireCallback = fireCallback;\r\n});\r\n// }\r\n","/// <reference path=\"DataControlField.ts\"/>\r\ndefine([\"require\", \"exports\", \"./DataControlField\", \"../Errors\", \"../Utility\"], function (require, exports, DataControlField_1, Errors_1, Utility_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class GridViewEditableCell extends DataControlField_1.GridViewDataCell {\r\n        constructor(field, dataItem, valueType) {\r\n            if (field == null)\r\n                throw Errors_1.Errors.argumentNull('field');\r\n            if (dataItem == null)\r\n                throw Errors_1.Errors.argumentNull('dataItem');\r\n            super({\r\n                dataField: field.dataField,\r\n                nullText: field.nullText, dataFormatString: field.dataFormatString\r\n            });\r\n            this._field = field;\r\n            this._dataItem = dataItem;\r\n            this._valueType = valueType;\r\n            this._mode = 'read';\r\n            if (!this._valueType) {\r\n                let value = dataItem[field.dataField];\r\n                if (value instanceof Date)\r\n                    this._valueType = 'date';\r\n                else\r\n                    this._valueType = typeof value;\r\n            }\r\n        }\r\n        get field() {\r\n            return this._field;\r\n        }\r\n        get mode() {\r\n            return this._mode;\r\n        }\r\n        beginEdit() {\r\n            if (this._field.readOnly) {\r\n                return;\r\n            }\r\n            this._mode = 'edit';\r\n            this.render(this._dataItem);\r\n        }\r\n        endEdit() {\r\n            if (this._field.readOnly) {\r\n                return;\r\n            }\r\n            this._mode = 'read';\r\n            let value = this.controlValue;\r\n            this.render(this._dataItem);\r\n        }\r\n        cancelEdit() {\r\n            if (this._field.readOnly) {\r\n                return;\r\n            }\r\n            this._mode = 'read';\r\n            // let value = this._dataItem[this.field.dataField];\r\n            this.render(this._dataItem);\r\n        }\r\n        render(dataItem) {\r\n            //value\r\n            let value = dataItem[this.field.dataField];\r\n            if (this._mode == 'edit') {\r\n                this.element.innerHTML = `<input type=\"text\" />`;\r\n                Utility_1.applyStyle(this.element.querySelector('input'), this._field.controlStyle);\r\n                this.element.querySelector('input').value =\r\n                    value === undefined ? null : `${value}`;\r\n                return;\r\n            }\r\n            super.render(dataItem);\r\n        }\r\n        //==============================================\r\n        // Virtual Methods\r\n        get controlValue() {\r\n            var text = this.element.querySelector('input').value;\r\n            switch (this._valueType) {\r\n                case 'number':\r\n                    return new Number(text).valueOf();\r\n                case 'date':\r\n                    return new Date(text);\r\n                default:\r\n                    return text;\r\n            }\r\n        }\r\n    }\r\n    exports.GridViewEditableCell = GridViewEditableCell;\r\n    class BoundField extends DataControlField_1.DataControlField {\r\n        constructor(params) {\r\n            super(params);\r\n            this._params = params;\r\n            this._valueElement = document.createElement('span');\r\n        }\r\n        params() {\r\n            return this._params;\r\n        }\r\n        /**\r\n         * Gets the caption displayed for a field when the field's value is null.\r\n         */\r\n        get nullText() {\r\n            return this.params().nullText;\r\n        }\r\n        createItemCell(dataItem) {\r\n            let cell = new GridViewEditableCell(this, dataItem);\r\n            cell.style(this.itemStyle);\r\n            return cell;\r\n        }\r\n        /**\r\n         * Gets the field for the value.\r\n         */\r\n        get dataField() {\r\n            return this.params().dataField;\r\n        }\r\n        /**\r\n         * Gets the string that specifies the display format for the value of the field.\r\n         */\r\n        get dataFormatString() {\r\n            return this.params().dataFormatString;\r\n        }\r\n        get controlStyle() {\r\n            return this.params().controlStyle;\r\n        }\r\n        get readOnly() {\r\n            return this.params().readOnly;\r\n        }\r\n    }\r\n    exports.BoundField = BoundField;\r\n});\r\n","/// <reference path=\"DataControlField.ts\"/>\r\ndefine([\"require\", \"exports\", \"./DataControlField\", \"../Control\", \"./BoundField\", \"../Utility\"], function (require, exports, DataControlField_1, Control_1, BoundField_1, Utility_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class GridViewCommandCell extends DataControlField_1.GridViewCell {\r\n        constructor(field) {\r\n            super();\r\n        }\r\n    }\r\n    class CommandField extends DataControlField_1.DataControlField {\r\n        constructor(params) {\r\n            super(params);\r\n            if (!this.params().cancelButtonHTML)\r\n                this.params().cancelButtonHTML = '取消';\r\n            if (!this.params().deleteButtonHTML)\r\n                this.params().deleteButtonHTML = '删除';\r\n            if (!this.params().editButtonHTML)\r\n                this.params().editButtonHTML = '编辑';\r\n            if (!this.params().updateButtonHTML)\r\n                this.params().updateButtonHTML = '更新';\r\n            if (!this.params().newButtonHTML)\r\n                this.params().newButtonHTML = '新增';\r\n            if (!this.params().insertButtonHTML)\r\n                this.params().insertButtonHTML = '添加';\r\n        }\r\n        params() {\r\n            return this._params;\r\n        }\r\n        get cancelButtonHTML() {\r\n            return this.params().cancelButtonHTML;\r\n        }\r\n        get deleteButtonHTML() {\r\n            return this.params().deleteButtonHTML;\r\n        }\r\n        get editButtonHTML() {\r\n            return this.params().editButtonHTML;\r\n        }\r\n        get updateButtonHTML() {\r\n            return this.params().updateButtonHTML;\r\n        }\r\n        get newButtonHTML() {\r\n            return this.params().newButtonHTML;\r\n        }\r\n        get insertButtonHTML() {\r\n            return this.params().insertButtonHTML;\r\n        }\r\n        get cancelButtonClass() {\r\n            return this.params().cancelButtonClass;\r\n        }\r\n        get deleteButtonClass() {\r\n            return this.params().deleteButtonClass;\r\n        }\r\n        get editButtonClass() {\r\n            return this.params().editButtonClass;\r\n        }\r\n        get newButtonClass() {\r\n            return this.params().newButtonClass;\r\n        }\r\n        get updateButtonClass() {\r\n            return this.params().updateButtonClass;\r\n        }\r\n        get insertButtonClass() {\r\n            return this.params().insertButtonClass;\r\n        }\r\n        createItemCell(dataItem) {\r\n            let cell = new GridViewCommandCell(this);\r\n            cell.style(this.itemStyle);\r\n            if (this.params().showEditButton) {\r\n                let editButton = this.createEditButton();\r\n                editButton.style.marginRight = '4px';\r\n                if (this.editButtonClass)\r\n                    editButton.className = this.editButtonClass;\r\n                cell.editButton = editButton;\r\n                editButton.addEventListener('click', (e) => this.on_editButtonClick(e));\r\n                cell.appendChild(editButton);\r\n                let updateButton = this.createUpdateButton();\r\n                updateButton.style.display = 'none';\r\n                updateButton.style.marginRight = '4px';\r\n                if (this.updateButtonClass)\r\n                    updateButton.className = this.updateButtonClass;\r\n                cell.updateButton = updateButton;\r\n                updateButton.addEventListener('click', (e) => this.on_insertOrUpdateButtonClick(e));\r\n                cell.appendChild(updateButton);\r\n                let cancelButton = this.createCancelButton();\r\n                cancelButton.style.display = 'none';\r\n                cancelButton.style.marginRight = '4px';\r\n                if (this.cancelButtonClass)\r\n                    cancelButton.className = this.cancelButtonClass;\r\n                cell.cacelButton = cancelButton;\r\n                cancelButton.addEventListener('click', (e) => this.on_cancelButtonClick(e));\r\n                cell.appendChild(cancelButton);\r\n            }\r\n            if (this.params().showDeleteButton) {\r\n                let deleteButton = this.createDeleteButton();\r\n                deleteButton.style.marginRight = '4px';\r\n                if (this.deleteButtonClass)\r\n                    deleteButton.className = this.deleteButtonClass;\r\n                cell.deleteButton = deleteButton;\r\n                deleteButton.onclick = (e) => this.on_deleteButtonClick(e);\r\n                cell.appendChild(deleteButton);\r\n            }\r\n            if (this.params().showNewButton) {\r\n                let newButton = this.createNewButton();\r\n                newButton.style.marginRight = '4px';\r\n                if (this.newButtonClass)\r\n                    newButton.className = this.newButtonClass;\r\n                newButton.onclick = (e) => this.on_newButtonClick(e);\r\n                cell.newButton = newButton;\r\n                cell.appendChild(newButton);\r\n                let insertButton = this.createInsertButton();\r\n                insertButton.style.display = 'none';\r\n                insertButton.style.marginRight = '4px';\r\n                insertButton.addEventListener('click', (e) => this.on_insertOrUpdateButtonClick(e));\r\n                if (this.insertButtonClass)\r\n                    insertButton.className = this.updateButtonClass;\r\n                cell.insertButton = insertButton;\r\n                cell.appendChild(insertButton);\r\n                let cancelButton = this.createCancelButton();\r\n                cancelButton.style.display = 'none';\r\n                cancelButton.style.marginRight = '4px';\r\n                cancelButton.addEventListener('click', (e) => this.on_cancelButtonClick(e));\r\n                if (this.cancelButtonClass)\r\n                    cancelButton.className = this.cancelButtonClass;\r\n                cell.cacelButton = cancelButton;\r\n                cell.appendChild(cancelButton);\r\n            }\r\n            return cell;\r\n        }\r\n        showReadStatusButtons(cell) {\r\n            if (cell.newButton) {\r\n                this.showButton(cell.newButton);\r\n                this.hideButton(cell.insertButton);\r\n            }\r\n            if (cell.editButton) {\r\n                this.showButton(cell.editButton);\r\n                this.hideButton(cell.updateButton);\r\n            }\r\n            if (cell.deleteButton)\r\n                this.showButton(cell.deleteButton);\r\n            this.hideButton(cell.cacelButton);\r\n        }\r\n        createEditButton() {\r\n            let button = document.createElement('a');\r\n            button.innerHTML = this.editButtonHTML;\r\n            button.href = 'javascript:';\r\n            return button;\r\n        }\r\n        createDeleteButton() {\r\n            let button = document.createElement('a');\r\n            button.innerHTML = this.deleteButtonHTML;\r\n            button.href = 'javascript:';\r\n            return button;\r\n        }\r\n        createInsertButton() {\r\n            let button = document.createElement('a');\r\n            button.innerHTML = this.insertButtonHTML;\r\n            button.href = 'javascript:';\r\n            return button;\r\n        }\r\n        createUpdateButton() {\r\n            let button = document.createElement('a');\r\n            button.innerHTML = this.updateButtonHTML;\r\n            button.href = 'javascript:';\r\n            return button;\r\n        }\r\n        createCancelButton() {\r\n            let button = document.createElement('a');\r\n            button.innerHTML = this.cancelButtonHTML;\r\n            button.href = 'javascript:';\r\n            return button;\r\n        }\r\n        createNewButton() {\r\n            let button = document.createElement('a');\r\n            button.innerHTML = this.newButtonHTML;\r\n            button.href = 'javascript:';\r\n            return button;\r\n        }\r\n        hideButton(button) {\r\n            button.style.display = 'none';\r\n        }\r\n        showButton(button) {\r\n            button.style.removeProperty('display');\r\n        }\r\n        findParentCell(element) {\r\n            let cellElement;\r\n            let p = element.parentElement;\r\n            while (p) {\r\n                if (p.tagName == 'TD') {\r\n                    cellElement = p;\r\n                    break;\r\n                }\r\n                p = p.parentElement;\r\n            }\r\n            return cellElement;\r\n        }\r\n        on_editButtonClick(e) {\r\n            let cellElement = this.findParentCell(e.target);\r\n            console.assert(cellElement != null);\r\n            let rowElement = cellElement.parentElement;\r\n            for (let i = 0; i < rowElement.cells.length; i++) {\r\n                let cell = Control_1.Control.getControlByElement(rowElement.cells[i]);\r\n                if (cell instanceof BoundField_1.GridViewEditableCell) {\r\n                    cell.beginEdit();\r\n                }\r\n            }\r\n            let cell = Control_1.Control.getControlByElement(cellElement);\r\n            this.showButton(cell.cacelButton);\r\n            this.showButton(cell.updateButton);\r\n            this.hideButton(cell.editButton);\r\n            if (cell.deleteButton)\r\n                this.hideButton(cell.deleteButton);\r\n            if (cell.newButton)\r\n                this.hideButton(cell.newButton);\r\n        }\r\n        on_cancelButtonClick(e) {\r\n            let cellElement = this.findParentCell(e.target);\r\n            console.assert(cellElement != null);\r\n            let rowElement = cellElement.parentElement;\r\n            var row = Control_1.Control.getControlByElement(rowElement);\r\n            if (row[\"isNew\"] == true) {\r\n                rowElement.remove();\r\n                return;\r\n            }\r\n            for (let i = 0; i < rowElement.cells.length; i++) {\r\n                let cell = Control_1.Control.getControlByElement(rowElement.cells[i]);\r\n                if (cell instanceof BoundField_1.GridViewEditableCell) {\r\n                    cell.cancelEdit();\r\n                }\r\n            }\r\n            let cell = Control_1.Control.getControlByElement(cellElement);\r\n            this.hideButton(cell.cacelButton);\r\n            this.hideButton(cell.updateButton);\r\n            this.showButton(cell.editButton);\r\n            if (cell.deleteButton)\r\n                this.showButton(cell.deleteButton);\r\n            if (cell.newButton)\r\n                this.showButton(cell.newButton);\r\n        }\r\n        on_insertOrUpdateButtonClick(e) {\r\n            if (e.target['_updating'])\r\n                e.target['_updating'] = true;\r\n            let cellElement = Utility_1.ElementHelper.findFirstParentByTagName(e.target, 'td');\r\n            let rowElement = cellElement.parentElement;\r\n            let cell = Control_1.Control.getControlByElement(cellElement);\r\n            let row = Control_1.Control.getControlByElement(rowElement);\r\n            //==========================================================\r\n            // 复制 dataItem 副本\r\n            let dataItem = Object.assign({}, row.dataItem || {});\r\n            //==========================================================\r\n            let dataSource = row.gridView.dataSource;\r\n            let editableCells = new Array();\r\n            for (let i = 0; i < rowElement.cells.length; i++) {\r\n                let cell = Control_1.Control.getControlByElement(rowElement.cells[i]);\r\n                if (cell instanceof BoundField_1.GridViewEditableCell && cell.mode == 'edit') {\r\n                    dataItem[cell.field.dataField] = cell.controlValue;\r\n                    editableCells.push(cell);\r\n                }\r\n            }\r\n            let isInsert = e.target == cell.insertButton;\r\n            let p = isInsert ? dataSource.insert(dataItem, rowElement.rowIndex) : dataSource.update(dataItem);\r\n            return p.then(() => {\r\n                if (isInsert) {\r\n                    rowElement.remove();\r\n                    return;\r\n                }\r\n                editableCells.forEach((item) => item.endEdit());\r\n                let cell = Control_1.Control.getControlByElement(cellElement);\r\n                this.showReadStatusButtons(cell);\r\n                e.target['_updating'] = false;\r\n            }).catch(() => e.target['_updating'] = false);\r\n        }\r\n        on_deleteButtonClick(e) {\r\n            let rowElement = Utility_1.ElementHelper.findFirstParentByTagName(e.target, \"tr\");\r\n            let row = Control_1.Control.getControlByElement(rowElement);\r\n            let dataSource = row.gridView.dataSource;\r\n            dataSource.delete(row.dataItem)\r\n                .then(() => {\r\n                rowElement.remove();\r\n            });\r\n        }\r\n        on_newButtonClick(e) {\r\n            let rowElement = Utility_1.ElementHelper.findFirstParentByTagName(e.target, \"tr\"); //cellElement.parentElement as HTMLTableRowElement;\r\n            let row = Control_1.Control.getControlByElement(rowElement);\r\n            let gridView = row.gridView;\r\n            let newRow = gridView.appendDataRow({}, rowElement.rowIndex);\r\n            newRow[\"isNew\"] = true;\r\n            let commandCells = newRow.cells.filter(o => o instanceof GridViewCommandCell);\r\n            newRow.cells.filter(o => o instanceof BoundField_1.GridViewEditableCell)\r\n                .forEach((c) => c.beginEdit());\r\n            commandCells.forEach((cell) => {\r\n                if (cell.deleteButton)\r\n                    this.hideButton(cell.deleteButton);\r\n                if (cell.editButton)\r\n                    this.hideButton(cell.editButton);\r\n                this.hideButton(cell.newButton);\r\n                this.showButton(cell.insertButton);\r\n                this.showButton(cell.cacelButton);\r\n            });\r\n        }\r\n    }\r\n    exports.CommandField = CommandField;\r\n});\r\n","define([\"require\", \"exports\", \"./DataControlField\"], function (require, exports, DataControlField_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class CustomField extends DataControlField_1.DataControlField {\r\n        constructor(params) {\r\n            super(params);\r\n        }\r\n        params() {\r\n            return this._params;\r\n        }\r\n        createHeaderCell() {\r\n            if (this.params().createHeaderCell) {\r\n                let cell = this.params().createHeaderCell();\r\n                cell.style(this.headerStyle);\r\n                return cell;\r\n            }\r\n            return super.createHeaderCell();\r\n        }\r\n        createFooterCell() {\r\n            if (this.params().createFooterCell) {\r\n                let cell = this.params().createFooterCell();\r\n                cell.style(this.params().footerStyle);\r\n                return cell;\r\n            }\r\n            return super.createFooterCell();\r\n        }\r\n        createItemCell(dataItem) {\r\n            if (this.params().createItemCell) {\r\n                let cell = this.params().createItemCell.apply(this, [dataItem]);\r\n                cell.style(this.params().itemStyle);\r\n                return cell;\r\n            }\r\n            return super.createItemCell(dataItem);\r\n        }\r\n    }\r\n    exports.CustomField = CustomField;\r\n});\r\n","define([\"require\", \"exports\", \"../Control\", \"../Utility\", \"../Errors\"], function (require, exports, Control_1, Utility_1, Errors_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    class GridViewCell extends Control_1.Control {\r\n        constructor() {\r\n            super(document.createElement('td'));\r\n        }\r\n    }\r\n    exports.GridViewCell = GridViewCell;\r\n    class GridViewDataCell extends GridViewCell {\r\n        constructor(params) {\r\n            super();\r\n            let p = params;\r\n            this.nullText = p.nullText != null ? p.nullText : '';\r\n            this.dataFormatString = p.dataFormatString;\r\n            this.dataField = p.dataField;\r\n            if (p.render) {\r\n                this.render = (dataItem) => p.render.apply(this, [dataItem, this.element]);\r\n            }\r\n        }\r\n        render(dataItem) {\r\n            let value = dataItem[this.dataField];\r\n            var text;\r\n            if (value == null)\r\n                text = this.nullText;\r\n            else if (this.dataFormatString)\r\n                text = this.formatValue(this.dataFormatString, value);\r\n            else\r\n                text = `${value}`;\r\n            this.element.innerHTML = text;\r\n        }\r\n        formatValue(format, arg) {\r\n            var result = '';\r\n            for (var i = 0;;) {\r\n                var open = format.indexOf('{', i);\r\n                var close = format.indexOf('}', i);\r\n                if ((open < 0) && (close < 0)) {\r\n                    result += format.slice(i);\r\n                    break;\r\n                }\r\n                if ((close > 0) && ((close < open) || (open < 0))) {\r\n                    if (format.charAt(close + 1) !== '}') {\r\n                        throw new Error('Sys.Res.stringFormatBraceMismatch');\r\n                    }\r\n                    result += format.slice(i, close + 1);\r\n                    i = close + 2;\r\n                    continue;\r\n                }\r\n                result += format.slice(i, open);\r\n                i = open + 1;\r\n                if (format.charAt(i) === '{') {\r\n                    result += '{';\r\n                    i++;\r\n                    continue;\r\n                }\r\n                if (close < 0)\r\n                    throw new Error('Sys.Res.stringFormatBraceMismatch');\r\n                var brace = format.substring(i, close);\r\n                var argFormat = brace;\r\n                if (typeof (arg) === \"undefined\" || arg === null) {\r\n                    arg = '';\r\n                }\r\n                if (arg instanceof Date)\r\n                    result = result + this.formatDate(arg, argFormat);\r\n                else if (arg instanceof Number || typeof arg == 'number')\r\n                    result = result + this.formatNumber(arg, argFormat);\r\n                else\r\n                    result = result + arg.toString();\r\n                i = close + 1;\r\n            }\r\n            return result;\r\n        }\r\n        formatDate(value, format) {\r\n            let y = value.getFullYear();\r\n            let m = value.getMonth() + 1;\r\n            let d = value.getDate();\r\n            let h = value.getHours();\r\n            let M = value.getMinutes();\r\n            let s = value.getSeconds();\r\n            let twoDigit = function (value) {\r\n                const TEN = 10;\r\n                if (value < TEN)\r\n                    return `0` + value;\r\n                return value.toString();\r\n            };\r\n            switch (format) {\r\n                case 'd':\r\n                    return `${y}-${m}-${d}`;\r\n                case 'g':\r\n                    return `${y}-${m}-${d} ${h}:${M}`;\r\n                case 'gg':\r\n                    return `${y}-${twoDigit(m)}-${twoDigit(d)} ${twoDigit(h)}:${twoDigit(M)}`;\r\n                case 'G':\r\n                    return `${y}-${m}-${d} ${h}:${M}:${s}`;\r\n                case 'GG':\r\n                    return `${y}-${twoDigit(m)}-${twoDigit(d)} ${twoDigit(h)}:${twoDigit(M)}:${twoDigit(s)}`;\r\n                case 't':\r\n                    return `${h}:${M}`;\r\n                case 'T':\r\n                    return `${h}:${M}:${s}`;\r\n            }\r\n            return value.toString();\r\n        }\r\n        formatNumber(value, format) {\r\n            let reg = new RegExp('^C[0-9]+');\r\n            if (reg.test(format)) {\r\n                let num = format.substr(1);\r\n                return value.toFixed(num);\r\n            }\r\n            return value.toString();\r\n        }\r\n    }\r\n    exports.GridViewDataCell = GridViewDataCell;\r\n    class GridViewHeaderCell extends Control_1.Control {\r\n        constructor(field) {\r\n            super(document.createElement('th'));\r\n            this.ascHTML = '↑';\r\n            this.descHTML = '↓';\r\n            this.sortingHTML = '...';\r\n            this.toSortHTML = '↕';\r\n            this.field = field;\r\n            this.sorting = Utility_1.callbacks();\r\n            this.sorted = Utility_1.callbacks();\r\n            if (field.sortExpression) {\r\n                let labelElement = document.createElement('a');\r\n                labelElement.href = 'javascript:';\r\n                labelElement.innerHTML = this.defaultHeaderText();\r\n                labelElement.onclick = () => this.handleSort();\r\n                this._iconElement = document.createElement('span');\r\n                this._iconElement.innerHTML = this.toSortHTML;\r\n                this.appendChild(labelElement);\r\n                this.appendChild(this._iconElement);\r\n                this.sorting.add(() => this._iconElement.innerHTML = this.sortingHTML);\r\n                this.sorted.add(() => this.updateSortIcon());\r\n            }\r\n            else {\r\n                this.element.innerHTML = this.defaultHeaderText();\r\n            }\r\n            this.style(field.headerStyle);\r\n        }\r\n        handleSort() {\r\n            let selectArguments = this.field.gridView.selectArguments;\r\n            let sortType = this.sortType == 'asc' ? 'desc' : 'asc';\r\n            Utility_1.fireCallback(this.sorting, this, { sortType });\r\n            selectArguments.sortExpression = this.field.sortExpression + ' ' + sortType;\r\n            return this.field.gridView.dataSource.select(selectArguments)\r\n                .then(() => {\r\n                this.sortType = sortType;\r\n                Utility_1.fireCallback(this.sorted, this, { sortType });\r\n            });\r\n        }\r\n        defaultHeaderText() {\r\n            return this.field.headerText || this.field.dataField || '';\r\n        }\r\n        get sortType() {\r\n            return this._sortType;\r\n        }\r\n        set sortType(value) {\r\n            this._sortType = value;\r\n        }\r\n        clearSortIcon() {\r\n            this._iconElement.innerHTML = this.toSortHTML;\r\n        }\r\n        updateSortIcon() {\r\n            if (this.sortType == 'asc') {\r\n                this._iconElement.innerHTML = this.ascHTML;\r\n            }\r\n            else if (this.sortType == 'desc') {\r\n                this._iconElement.innerHTML = this.descHTML;\r\n            }\r\n            else {\r\n                this._iconElement.innerHTML = this.toSortHTML;\r\n            }\r\n        }\r\n    }\r\n    exports.GridViewHeaderCell = GridViewHeaderCell;\r\n    class DataControlField {\r\n        constructor(params) {\r\n            if (params.visible == null)\r\n                params.visible = true;\r\n            this._params = params;\r\n        }\r\n        /**\r\n         * Gets the text that is displayed in the footer item of a data control field.\r\n         */\r\n        get footerText() {\r\n            return this._params.footerText;\r\n        }\r\n        /**\r\n         * Sets the text that is displayed in the footer item of a data control field.\r\n         */\r\n        set footerText(value) {\r\n            this._params.footerText = value;\r\n        }\r\n        /**\r\n         * Gets the text that is displayed in the header item of a data control field.\r\n         */\r\n        get headerText() {\r\n            return this._params.headerText;\r\n        }\r\n        /**\r\n        * Sets the text that is displayed in the header item of a data control field.\r\n        */\r\n        set headerText(value) {\r\n            this._params.headerText = value;\r\n        }\r\n        get itemStyle() {\r\n            return this._params.itemStyle;\r\n        }\r\n        set itemStyle(value) {\r\n            this._params.itemStyle = value;\r\n        }\r\n        get footerStyle() {\r\n            return this._params.footerStyle;\r\n        }\r\n        set footerStyle(value) {\r\n            this._params.footerStyle = value;\r\n        }\r\n        get headerStyle() {\r\n            return this._params.headerStyle;\r\n        }\r\n        set headerStyle(value) {\r\n            this._params.headerStyle = value;\r\n        }\r\n        get visible() {\r\n            return this._params.visible;\r\n        }\r\n        get gridView() {\r\n            return this._gridView;\r\n        }\r\n        set gridView(value) {\r\n            this._gridView = value;\r\n        }\r\n        /**\r\n         * Gets a sort expression that is used by a data source control to sort data.\r\n         */\r\n        get sortExpression() {\r\n            return this._params.sortExpression;\r\n        }\r\n        /**\r\n         * Sets a sort expression that is used by a data source control to sort data.\r\n         */\r\n        set sortExpression(value) {\r\n            this._params.sortExpression = value;\r\n        }\r\n        createHeaderCell() {\r\n            let cell = new GridViewHeaderCell(this);\r\n            return cell;\r\n        }\r\n        createFooterCell() {\r\n            let cell = new GridViewCell();\r\n            cell.element.innerHTML = this.footerText || '';\r\n            cell.style(this.footerStyle);\r\n            return cell;\r\n        }\r\n        createItemCell(dataItem) {\r\n            if (!dataItem)\r\n                throw Errors_1.Errors.argumentNull('dataItem');\r\n            let cell = new GridViewCell();\r\n            cell.style(this.itemStyle);\r\n            return cell;\r\n        }\r\n    }\r\n    exports.DataControlField = DataControlField;\r\n});\r\n","define([\"require\", \"exports\", \"./GridView\", \"./fields/BoundField\", \"./fields/CommandField\", \"./fields/CustomField\", \"./fields/DataControlField\", \"./DropDown\", \"./TextBox\", \"./DataSource\", \"./NumberPagingBar\"], function (require, exports, GridView_1, BoundField_1, CommandField_1, CustomField_1, DataControlField_1, DropDown_1, TextBox_1, DataSource_1, NumberPagingBar_1) {\r\n    \"use strict\";\r\n    Object.defineProperty(exports, \"__esModule\", { value: true });\r\n    exports.GridView = GridView_1.GridView;\r\n    exports.GridViewDataRow = GridView_1.GridViewDataRow;\r\n    exports.BoundField = BoundField_1.BoundField;\r\n    exports.CommandField = CommandField_1.CommandField;\r\n    exports.CustomField = CustomField_1.CustomField;\r\n    exports.GridViewCell = DataControlField_1.GridViewCell;\r\n    exports.DataControlField = DataControlField_1.DataControlField;\r\n    exports.GridViewDataCell = DataControlField_1.GridViewDataCell;\r\n    exports.DropDown = DropDown_1.DropDown;\r\n    exports.TextBox = TextBox_1.TextBox;\r\n    exports.DataSource = DataSource_1.DataSource;\r\n    exports.DataSourceSelectArguments = DataSource_1.DataSourceSelectArguments;\r\n    exports.ArrayDataSource = DataSource_1.ArrayDataSource;\r\n    exports.NumberPagingBar = NumberPagingBar_1.NumberPagingBar;\r\n});\r\n"],"sourceRoot":""}